declare interface ScriptContext {
    readonly players: MpPlayerPool;
    readonly vehicles: MpVehiclePool;
    readonly objects: MpObjectPool;
    readonly pickups: MpPickupPool;
    readonly blips: MpBlipPool;
    readonly gui: MpGui;
    readonly markers: MpMarkerPool;
    readonly checkpoints: MpCheckpointPool;
    readonly cameras: MpCameraPool;
    readonly browsers: MpBrowserPool;
    readonly colshapes: MpColshapePool;
    readonly events: MpEvents;
    readonly game: MpGame;
    readonly nametags: MpNametags;
    readonly raycasting: MpRaycasting;
    readonly Vector3: Vector3;
}

declare interface MpBlip extends MpEntity {
    setColour(color: number): void;
    setNameToPlayerName(player: MpPlayer): void;
    setShowCone(toggle: boolean): void;
    setSecondaryColour(r: number, g: number, b: number): void;
    getNextInfoId(): MpBlip;
    getFirstInfoId(): MpBlip;
    getInfoIdDisplay(): number;
    getSprite(): number;
    setCategory(index: number): void;
    setAsMissionCreator(toggle: boolean): void;
    isMissionCreator(): boolean;
    setFade(opacity: number, duration: number): void;
    setFlashesAlternate(toggle: boolean): void;
    setAlpha(alphaLevel: string, skin: boolean): void;
    setAlpha(alpha: number): void;
    getInfoIdEntityIndex(): MpEntity | object;
    setRoute(enabled: boolean): void;
    hideNumberOn(): void;
    getCoords(): MpVector3;
    setShowHeadingIndicator(toggle: boolean): void;
    setAsFriendly(toggle: boolean): void;
    getHudColour(): number;
    pulse(): void;
    addTextComponentSubstringName(): void;
    setRouteColour(colour: number): void;
    setDisplay(displayId: number): void;
    getAlpha(): number;
    getInfoIdPickupIndex(): MpPickup;
    showNumberOn(number: number): void;
    isFlashing(): boolean;
    doesExist(): boolean;
    setFlashInterval(p1: object): void;
    setCoords(posX: number, posY: number, posZ: number): void;
    setPriority(priority: number): void;
    setFlashes(toggle: boolean): void;
    setBright(toggle: boolean): void;
    endTextCommandSetName(): void;
    setAsShortRange(toggle: boolean): void;
    getInfoIdType(): number;
    setScale(scale: number): void;
    setFlashTimer(duration: number): void;
    isShortRange(): boolean;
    getColour(): number;
    setSprite(spriteId: number): void;
    setHighDetail(toggle: boolean): void;
    isOnMinimap(): boolean;
    setNameFromTextFile(gxtEntry: string): void;
    setRotation(rotation: number): void;
}

declare interface MpBlipPool extends MpPool<MpBlip> {

}

declare interface MpBrowser {
    url: string;
    active: boolean;

    reload(ignoreCache: boolean): void;
    execute(executedCode: string): void;
    destroy(): void;
    markAsChat(): void;
}

declare interface MpBrowserPool extends MpPool<MpBrowser> {
    'new'(url: string): MpBrowser;
}

declare interface MpCamera extends MpEntity {
    getDirection(): MpVector3;
    setActive(active: boolean): void;
    isRendering(): boolean;
    isInterpolating(): boolean;
    setUseShallowDofMode(toggle: boolean): void;
    setDebugName(name: string): void;
    getFarDof(): number;
    setDofMaxNearInFocuxDistanceBlendLevel(p0: number): void;
    setDofPlanes(p0: number, p1: number, p2: number, p3: number): void;
    setNearDof(nearDof: number): void;
    setAnimCurrentPhase(phase: number): void;
    setInheritRollVehicle(p1: boolean): void;
    setCoord(posX: number, posY: number, posZ: number): void;
    pointAt(entity: MpEntity, offsetX: number, offsetY: number, offsetZ: number, p4: boolean): void;
    setDofStrength(dofStrength: number): void;
    attachToPedBone(ped: MpPed, boneIndex: number, x: number, y: number, z: number, heading: boolean): void;
    pointAtPedBone(ped: MpPed, boneIndex: number, x: number, y: number, z: number, heading: boolean): void;
    shake(type: string, amplitude: number): void;
    isShaking(): boolean;
    setMotionBlurStrength(strength: number): void;
    getRot(p0: number): MpVector3;
    setDofFnumberOfLens(p1: number): void;
    setRot(rotX: number, rotY: number, rotZ: number, p3: number): void;
    destroy(destroy?: boolean): void;
    setAffectsAiming(toggle: boolean): void;
    playAnim(animName: string, animDictionary: string, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, p8: boolean, p9: number): void;
    playAnim(animName: string, propName: string, p2: number, p3: boolean, p4: boolean, p5: boolean, delta: number, bitset: object): boolean;
    setActiveWithInterp(camFrom: MpCamera, duration: number, easeLocation: number, easeRotation: number): void;
    getAnimCurrentPhase(): number;
    animatedShake(p0: string, p1: string, p2: string, p3: number): void;
    detach(): void;
    doesExist(): boolean;
    setFarClip(farClip: number): void;
    setFov(fieldOfView: number): void;
    getSplinePhase(): number;
    getFarClip(): number;
    getCoord(): MpVector3;
    stopShaking(p0: boolean): void;
    setParams(x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, fov: number, duration: number, p8: number, p9: number, p10: number): void;
    getFov(): number;
    setDofMaxNearInFocusDistance(p0: number): void;
    getNearClip(): number;
    setDofFocusDistanceBias(p0: number): void;
    setNearClip(nearClip: number): void;
    isPlayingAnim(animName: string, animDictionary: string): boolean;
    setShakeAmplitude(amplitude: number): void;
    isActive(): boolean;
    setFarDof(farDof: number): void;
    stopPointing(): void;
    pointAtCoord(x: number, y: number, z: number): void;
    attachTo(entity: MpEntity | object, xOffset: number, yOffset: number, zOffset: number, isRelative: boolean): void;
    attachTo(entity: MpEntity | object, boneIndex: number, xPos: number, yPos: number, zPos: number, xRot: number, yRot: number, zRot: number, p8: boolean, useSoftPinning: boolean, collision: boolean, isPed: boolean, vertexIndex: number, fixedRot: boolean): void;
}

declare interface MpCameraPool extends MpPool<MpCamera> {
    "new"( name: string ): MpCamera;
}

declare interface MpCheckpoint extends MpEntity {

}

declare interface MpCheckpointPool extends MpPool<MpCheckpoint> {

}

declare interface MpColshape extends MpEntity {

}

declare interface MpColshapePool extends MpPool<MpColshape> {

}

declare interface MpEntity {
    readonly id: number;
    dimension: number;
    readonly type: string;
    position: MpVector3;
    model: number;
    alpha: number;
    readonly handle: object;

    destroy(): void;

    hasClearLosToInFront(entity: MpEntity | object): boolean;
    getPedIndexFromIndex(): MpPed | object;
    doesHaveDrawable(): boolean;
    setCoords(xPos: number, yPos: number, zPos: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, clearArea: boolean): void;
    setRecordsCollisions(toggle: boolean): void;
    getForwardVector(): MpVector3;
    isAMission(): boolean;
    setLoadCollisionFlag(toggle: boolean): void;
    setMaxSpeed(speed: number): void;
    isTouchingModel(modelHash: string | number): boolean;
    isStatic(): boolean;
    getMaxHealth(): number;
    setMaxHealth(value: number): void;
    setDynamic(toggle: boolean): void;
    setCanBeDamaged(toggle: boolean): void;
    isTouching(targetEntity: MpEntity | object): boolean;
    getOffsetFromInWorldCoords(offsetX: number, offsetY: number, offsetZ: number): MpVector3;
    applyForceToCenterOfMass(forceType: number, x: number, y: number, z: number, p4: boolean, isRel: boolean, highForce: boolean, p7: boolean): void;
    setCollision(toggle: boolean, keepPhysics: boolean): void;
    setVelocity(x: number, y: number, z: number): void;
    isUpsidedown(): boolean;
    getHeightAboveGround(): number;
    isPlayingAnim(animDict: string, animName: string, p2: number): boolean;
    isAtCoord(xPos: number, yPos: number, zPos: number, xSize: number, ySize: number, zSize: number, p6: boolean, p7: boolean, p8: number): boolean;
    hasAnimFinished(animDict: string, animName: string, p2: number): boolean;
    getRotationVelocity(): MpVector3;
    getOffsetFromGivenWorldCoords(posX: number, posY: number, posZ: number): MpVector3;
    setCoordsNoOffset(xPos: number, yPos: number, zPos: number, xAxis: number, yAxis: number, zAxis: number): void;
    isAttachedToAnyVehicle(): boolean;
    stopAnim(animation: string, animGroup: string, p2: number): void;
    setAnimSpeed(animDict: string, animName: string, speedMultiplier: number): void;
    setMotionBlur(toggle: boolean): void;
    getAnimCurrentTime(animDict: string, animName: string): number;
    setInvincible(toggle: boolean): void;
    getCoords(alive: boolean): MpVector3;
    forceAiAndAnimationUpdate(): void;
    getLodDist(): number;
    freezePosition(toggle: boolean): void;
    stopSynchronizedAnim(p0: number, p1: boolean): boolean;
    setAnimCurrentTime(animDict: string, animName: string, time: number): void;
    setAlpha(alphaLevel: number, skin: boolean): void;
    getWorldPositionOfBone(boneIndex: number): MpVector3;
    isVisible(): boolean;
    getVelocity(): MpVector3;
    getAttachedTo(): MpEntity | object;
    setHasGravity(toggle: boolean): void;
    getVehicleIndexFromIndex(): MpVehicle | object;
    getNearestPlayerToOnTeam(team: number): MpPlayer;
    getAnimTotalTime(animDict: string, animName: string): number;
    isInAngledArea(originX: number, originY: number, originZ: number, edgeX: number, edgeY: number, edgeZ: number, angle: number, p7: boolean, p8: boolean, p9: object): boolean;
    isAPed(): boolean;
    isUpright(angle: number): boolean;
    isInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: boolean, p7: boolean, p8: object): boolean;
    setTrafficlightOverride(state: number): void;
    setLodDist(value: number): void;
    getAlpha(): number;
    getHeight(x: number, y: number, z: number, atTop: boolean, inWorldCoords: boolean): number;
    getLastMaterialHitBy(): string | number;
    isDead(): boolean;
    hasBeenDamagedByAnyPed(): boolean;
    setCoords2(xPos: number, yPos: number, zPos: number, xAxis: number, yAxis: number, zAxis: number, clearArea: boolean): void;
    isAVehicle(): boolean;
    setHealth(health: number): void;
    attachTo(entity: MpEntity | object, boneIndex: number, xPos: number, yPos: number, zPos: number, xRot: number, yRot: number, zRot: number, p8: boolean, useSoftPinning: boolean, collision: boolean, isPed: boolean, vertexIndex: number, fixedRot: boolean): void;
    setOnlyDamagedByRelationshipGroup(p0: boolean, p1: object): void;
    getNearestPlayerTo(): MpPlayer;
    doesExist(): boolean;
    setRenderScorched(toggle: boolean): void;
    isAt(entity: MpEntity | object, xSize: number, ySize: number, zSize: number, p4: boolean, p5: boolean, p6: number): boolean;
    setQuaternion(x: number, y: number, z: number, w: number): void;
    setOnlyDamagedByPlayer(toggle: boolean): void;
    getQuaternion(x: number, y: number, z: number, w: number): MpQuaternion;
    setLights(toggle: boolean): void;
    playAnim(animName: string, propName: string, p2: number, p3: boolean, p4: boolean, p5: boolean, delta: number, bitset: object): boolean;
    getRoll(): number;
    getPhysicsHeading(): number;
    setRotation(pitch: number, roll: number, yaw: number, rotationOrder: number, p4: boolean): void;
    getForwardY(): number;
    isInAir(): boolean;
    getType(): number;
    hasCollidedWithAnything(): boolean;
    getForwardX(): number;
    isAnObject(): boolean;
    setHeading(heading: number): void;
    hasBeenDamagedByAnyObject(): boolean;
    getUprightValue(): number;
    detach(p0: boolean, collision: boolean): void;
    getSpeedVector(relative: boolean): MpVector3;
    resetAlpha(): void;
    getModel(): string | number;
    setNoCollision(entity: MpEntity | object, collision: boolean): void;
    getScript(script: MpGameScript): MpGameScript;
    clearLastDamage(): void;
    setAlwaysPrerender(toggle: boolean): void;
    setAsMission(p0: boolean, byThisScript: boolean): void;
    getRotation(rotationOrder: number): MpVector3;
    isAttachedToAnyPed(): boolean;
    isAttached(): boolean;
    isInZone(zone: string): boolean;
    attachToPhysically(entity: MpEntity | object, boneIndex1: number, boneIndex2: number, xPos1: number, yPos1: number, zPos1: number, xPos2: number, yPos2: number, zPos2: number, xRot: number, yRot: number, zRot: number, breakForce: number, fixedRot: boolean, p14: boolean, collision: boolean, p16: boolean, p17: number): void;
    applyForceTo(forceType: number, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, boneIndex: number, isRel: number, p9: boolean, highForce: boolean, p11: boolean, p12: boolean): void;
    playSynchronizedAnim(syncedScene: number, animation: string, propName: string, p3: number, p4: number, p5: object, p6: number): boolean;
    hasBeenDamagedBy(entity: MpEntity | object, p1: boolean): boolean;
    isCollisonDisabled(): boolean; // TODO: Is this correct?
    isAttachedToAnyObject(): boolean;
    isInWater(): boolean;
    isWaitingForWorldCollision(): boolean;
    setCanBeTargetedWithoutLos(toggle: boolean): void;
    getPitch(): number;
    getSpeed(): number;
    isVisibleToScript(): boolean;
    getObjectIndexFromIndex(): MpObject | object;
    doesHavePhysics(): boolean;
    doesBelongToThisScript(p0: boolean): boolean;
    hasBeenDamagedByAnyVehicle(): boolean;
    setCanBeDamagedByRelationshipGroup(p0: boolean, p1: object): void;
    isOccluded(): boolean;
    getCollisionNormalOfLastHitFor(): MpVector3;
    isOnScreen(): boolean;
    getSubmergedLevel(): number;
    getHeading(): number;
    hasCollisionLoadedAround(): boolean;
    setIsTargetPriority(p0: boolean, p1: number): void;
    setVisible(toggle: boolean, p1: boolean): void;
    hasAnimEventFired(actionHash: string | number): boolean;
    getMatrix(rightVector: MpVector3, forwardVector: MpVector3, upVector: MpVector3, position: MpVector3): {
        readonly rightVector: MpVector3;
        readonly forwardVector: MpVector3;
        readonly upVector: MpVector3;
        readonly position: MpVector3;
    };
    getHealth(): number;
    isAttachedTo(to: MpEntity | object): boolean;
    processAttachments(): void;
    getPopulationType(): number;
    setProofs(bulletProof: boolean, fireProof: boolean, explosionProof: boolean, collisionProof: boolean, meleeProof: boolean, p5: boolean, p6: boolean, drownProof: boolean): void;
    getBoneIndexByName(boneName: string): number;
    hasClearLosTo(entity: MpEntity | object, traceType: number): boolean;
}

declare interface MpEvents {
    add(events: object): void;
    add(eventName: string, func: (...args: any[]) => void): void;
    call(eventName: string, ...args: any[]): void;
    addCommand(commandName: string, handlerFunction: (fullText: string, ...args: any[]) => void): void;
    callRemote( eventName: string, ...args: any[] ): void;
    remove( eventname: string, func: ( ...args: any[] ) => void ): void;
}

declare interface MpGameApp {
    appDeleteAppData(appName: string): boolean;
    appGetFloat(property: string): number;
    appGetString(property: string): string;
    appGetInt(property: string): number;
    appHasSyncedData(property: string): boolean;
    appSetApp(appName: string): void;
    appSetBlock(blockName: string): void;
    appSetFloat(property: string, value: number): void;
    appSetInt(property: string, value: number): void;
    appSetString(property: string, value: string): void;
}

declare interface MpGameAudio {
    startAudioScene(sceneName: string): boolean;
    isAmbientZoneEnabled(ambientZone: string): boolean;
    getVehicleDefaultHorn(vehicle: MpVehicle | object): string | number;
    prepareSynchronizedAudioEventForScene(p0: object, p1: object): boolean;
    startAlarm(alarmName: string, p2: boolean): void;
    setMobileRadioEnabledDuringGameplay(toggle: boolean): void;
    clearAmbientZoneListState(p0: object, p1: boolean): void;
    overrideTrevorRage(p0: object): void;
    setUserRadioControlEnabled(p0: boolean): void;
    setAmbientZoneStatePersistent(ambientZone: string, p1: boolean, p2: boolean): void;
    prepareMusicEvent(eventName: string): boolean;
    loadStream(streamName: string, soundSet: string): boolean;
    specialFrontendEqual(x: number, y: number, z: number): void;
    clearAmbientZoneState(p0: object, p1: boolean): void;
    isAlarmPlayer(alarmName: string): boolean;
    startScriptPhoneConversation(p0: boolean, p1: boolean): void;
    getNetworkIdFromSoundId(soundId: number): number;
    stopAllAlarms(stop: boolean): void;
    requestScriptAudioBank(p0: string, p1: boolean): boolean;
    setVariableOnStream(p0: string, p1: number): void;
    freezeRadioStation(radioStation: string): void;
    playAmbientSpeechWithVoice(p0: MpPed | object, speechName: string, voiceName: string, speechParam: string, p4: boolean): void;
    releaseSoundId(soundId: number): void;
    setAggressiveHorns(toggle: boolean): void;
    setStaticEmitterEnabled(emitterName: string, toggle: boolean): void;
    preloadScriptConversation(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void;
    setCutsceneAudioOverride(p0: string): void;
    setGpsActive(active: boolean): void;
    loadStreamWithStartOffset(streamName: string, startOffset: number, soundSet: string): boolean;
    cancelMusicEvent(eventName: string): boolean;
    preloadScriptPhoneConversation(p0: boolean, p1: boolean): void;
    getNumberOfPassengerVoiceVariations(p0: object): number;
    playSoundFrontend(soundId: number, audioName: string, audioRef: string, p3: boolean): void;
    startScriptConversation(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void;
    triggerMusicEvent(eventName: string): boolean;
    requestMissionAudioBank(p0: string, p1: boolean): boolean;
    getSoundIdFromNetworkId(netId: number): number;
    releasedNamedScriptAudioBank(audioBank: string): void;
    playSound(soundId: number, audioName: string, audioRef: string, p3: boolean, p4: object, p5: boolean): void;
    pauseScriptedConversation(p0: boolean): void;
    setInitialPlayerStation(radioStation: string): void;
    playSynchronizedAudioEvent8(p0: object): boolean;
    findRadioStationIndex(station: number): number;
    playSoundFromCoord(soundId: number, audioName: string, x: number, y: number, z: number, audioRef: string, p6: boolean, p7: object, p8: boolean): void;
    hintAmbientAudioBank(p0: object, p1: object): void;
    isAmbientSpeechPlaying(p0: MpPed | object): boolean;
    stopSynchronizedAudioEvent(p0: object): boolean;
    getSynchronizedAudioEventPositionThisFrame(p0: string, p1: MpEntity | object): void;
    addPedToConversation(p0: object, p1: object, p2: string): void;
    setAmbientZoneListState(p0: object, p1: boolean, p2: boolean): void;
    prepareAlarm(alarmName: string): boolean;
    interruptConversation(p0: object, p1: object, p2: object): void;
    stopAlarm(alarmName: string, toggle: boolean): void;
    stopSound(soundId: number): void;
    setRadioToStationIndex(radioStation: number): void;
    setEmitterRadioStation(emitterName: string, radioStation: string): void;
    setVariableOnSound(soundId: number, p1: object, p2: number): void;
    playMissionCompleteAudio(audioName: string): void;
    unlockMissionNewsStory(newsStory: number): void;
    getRadioStationName(radioStation: number): string;
    setRadioTrack(radioStation: string, radioTrack: string): void;
    isAudioSceneActive(scene: string): boolean;
    setMicrophonePosition(p0: boolean, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number): void;
    stopCurrentPlayerAmbientSpeech(p0: MpPed | object): void;
    setAudioFlag(flagName: string, toggle: boolean): void;
    playPain(painId: number, p1: number, p2: number): void;
    getPlayerHeadsetSoundAlternate(p0: string, p1: number): void;
    setAmbientZoneState(p0: object, p1: boolean, p2: boolean): void;
    setMobilePhoneRadioState(state: boolean): void;
    setRadioAutoUnfreeze(p0: boolean): void;
    addLineToConversation(p0: object, p1: object, p2: object, p3: object, p4: object, p5: boolean, p6: boolean, p7: boolean, p8: boolean, p9: object, p10: boolean, p11: boolean, p12: boolean): void;
    setRadioToStationName(stationName: string): void;
    registerScriptWithAudio(p0: object): void;
    prepareSynchronizedAudioEvent(p0: string, p1: object): void;
    setAnimalMood(p0: object, p1: object): void;
    isScriptedSpeechPlaying(p0: object): boolean;
    playEndCreditsMusic(play: boolean): void;
    stopScriptedConversation(p0: boolean): void;
    stopAudioScene(scene: string): void;
    playPoliceReport(name: string, p1: number): void;
    playSoundFromEntity(soundId: number, audioName: string, entity: MpEntity | object, audioRef: string, p4: boolean, p5: object): void;
    setPlayerAngry(playerPed: MpPed | object, disabled: boolean): void;
    playStreamFromObject(object: MpObject | object): void;
    playAmbientSpeechAtCoords(p0: string, p1: string, p2: number, p3: number, p4: number, p5: string): void;
    setAudioSceneVariable(p0: object, p1: object, p2: number): void;
    overrideUnderwaterStream(p0: object, p1: boolean): void;
    setAmbientZoneListStatePersistent(ambientZone: string, p1: boolean, p2: boolean): void;
    resetPedAudioFlags(p0: object): void;
    setFrontendRadioActive(active: boolean): void;
    playPedRingtone(ringtoneName: string, ped: MpPed | object, p2: boolean): void;
    hintScriptAudioBank(p0: object, p1: object): void;
    unfreezeRadioStation(radioStation: string): void;
    hasSoundFinished(soundId: number): boolean;
    requestAmbientAudioBank(p0: string, p1: boolean): boolean;
}

declare interface MpGameBrain {
    registerObjectScriptBrain(stringName: string, p1: string | number, p2: number, p3: number, p4: number, p5: number): void;
    disableScriptBrainSet(brainSet: number): void;
    registerWorldPointScriptBrain(p0: object, p1: number, p2: object): void;
    addScriptToRandom(name: string, model: string | number, p2: number, p3: number): void;
    enableScriptBrainSet(brainSet: number): void;
    isObjectWithinBrainActivationRange(object: MpObject | object): boolean;
}

declare interface MpGameCam {
    isCamSplinePaused(p0: object): boolean;
    renderScriptCams(render: boolean, ease: boolean, easeTime: number, p3: boolean, p4: boolean): void;
    stopGameplayCamShaking(p0: boolean): void;
    setGameplayCamRawYaw(yaw: number): void;
    setCamSplineDuration(cam: number, timeDuration: number): void;
    setGameplayEntityHint(p0: object, p1: number, p2: number, p3: number, p4: boolean, p5: object, p6: object, p7: object, p8: object): void;
    setFollowVehicleCamZoomLevel(zoomLevel: number): void;
    stopCinematicCamShaking(p0: boolean): void;
    setCamSplinePhase(cam: number, p1: number): void;
    setGameplayPedHint(p0: MpPed, x1: number, y1: number, z1: number, p4: boolean, p5: object, p6: object, p7: object): void;
    overrideCamSplineVelocity(cam: number, p1: number, p2: number, p3: number): void;
    setFollowPedCamCutsceneChat(p0: string, p1: number): void;
    setGameplayHintFov(fov: number): void;
    setCinematicButtonActive(p0: boolean): void;
    setFollowPedCamViewMode(viewMode: number): void;
    getGameplayCamRot(p0: number): MpVector3;
    createCamera(camHash: number, p1: boolean): MpCamera;
    createCameraWithParams(camHash: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, fov: number, p8: boolean, p9: object): MpCamera;
    setGameplayCamRelativePitch(x: number, p1: number): void;
    createCinematicShot(p0: object, p1: number, p2: object, entity: MpEntity | object): void;
    setGameplayCamRawPitch(pitch: number): void;
    stopCinematicShot(p0: object): void;
    overrideCamSplineMotionBlur(p0: object, p1: object, p2: number, p3: number): void;
    setCamEffect(p0: number): void;
    getGameplayCamRot(p0: number): MpVector3;
    setGameplayObjectHint(p0: object, p1: number, p2: number, p3: number, p4: boolean, p5: object, p6: object, p7: object): void;
    addCamSplineNode(camera: number, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, length: number, p8: number, p9: number): void;
    doScreenFadeOut(duration: number): void;
    destroyAllCams(destroy: boolean): void;
    clampGameplayCamYaw(minimum: number, maximum: number): void;
    setTimeIdleDrop(p0: boolean, p1: boolean): void;
    setGameplayVehicleHint(p0: object, p1: number, p2: number, p3: number, p4: boolean, p5: object, p6: object, p7: object): void;
    clampGameplayCamPitch(minimum: number, maximum: number): void;
    setGameplayCamShakeAmplitude(amplitude: number): void;
    setFollowVehicleCamViewMode(viewMode: number): void;
    getCamSplineNodeIndex(cam: number): boolean;
    setGameplayCamRelativeHeading(heading: number): void;
    createCamWithParams(camName: string, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, fov: number, p8: boolean, p9: object): MpCamera;
    createCam(camName: string, p1: boolean): MpCamera;
    setCinematicCamShakeAmplitude(p0: number): void;
    isCinematicShotActive(p0: object): boolean;
    doScreenFadeIn(duration: number): void;
    setGameplayCoordHint(p0: number, p1: number, p2: number, p3: object, p4: object, p5: object, p6: object): void;
    getCamSplineNodePhase(p0: object): number;
    setWidescreenBorders(p0: boolean, p1: number): void;
    shakeCinematicCam(p0: string, p1: number): void;
    setCinematicModeActive(p0: boolean): void;
    animateGameplayCamZoom(p0: number, distance: number): void;
    playSynchronizedCamAnim(p0: object, p1: object, animName: string, animDictionary: string): boolean;
    isSphereVisible(x: number, y: number, z: number, radius: number): boolean;
    getIsMultiplayerBrief(p0: boolean): void;
    stopGameplayHint(p0: boolean): void;
    shakeGameplayCam(shakeName: string, intensity: number): void;
}

declare interface MpGameControls {
    getControlActionName(inputGroup: number, control: number, p2: boolean): string;
    getDisabledControlNormal(inputGroup: number, control: number): number;
    isInputJustDisabled(inputGroup: number): boolean;
    isControlEnabled(inputGroup: number, control: number): boolean;
    isDisabledControlJustReleased(inputGroup: number, control: number): boolean;
    enableControlAction(inputGroup: number, control: number, enable: boolean): void;
    stopPadShake(p0: object): void;
    setPadShake(p0: number, duration: number, frequency: number): void;
    isControlJustReleased(inputGroup: number, control: number): boolean;
    isControlJustPressed(inputGroup: number, control: number): boolean;
    disableAllControlActions(inputGroup: number): void;
    isControlReleased(inputGroup: number, control: number): boolean;
    setPlayerpadShakesWhenControllerDisabled(toggle: boolean): void;
    isDisabledControlJustPressed(inputGroup: number, control: number): boolean;
    isInputDisabled(inputGroup: number): boolean;
    enableAllControlActions(inputGroup: number): void;
    getControlValue(inputGroup: number, control: number): number;
    isControlPressed(inputGroup: number, control: number): boolean;
    setControlNormal(inputGroup: number, control: number, amount: number): boolean;
    getControlNormal(inputGroup: number, control: number): number;
    setInputExclusive(inputGroup: number, control: number): void;
    disableControlAction(inputGroup: number, control: number, disable: boolean): void;
}

declare interface MpGameCutscene {
    setCutscenePedPropVariation(cutsceneEntName: string, p1: number, p2: number, p3: number, modelHash: string | number): void;
    getEntityIndexOfCutsceneEntity(cutsceneEntName: string, modelHash: string | number): MpEntity;
    startCutscene(p0: number): void;
    startCutsceneAtCoords(x: number, y: number, z: number, p3: number): void;
    hasThisCutsceneLoaded(cutsceneName: string): boolean;
    doesCutsceneEntityExist(cutsceneEntName: string, modelHash: string | number): boolean;
    canSetExitStateForRegisteredEntity(cutsceneEntName: string, modelHash: string | number): boolean;
    canSetEnterForRegisteredEntity(cutsceneEntName: string, modelHash: string | number): boolean;
    requestCutscene(cutsceneName: string, p1: number): void;
    setCutsceneFadeValues(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void;
    setCutsceneTriggerArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
    canSetExitStateForCamera(p0: boolean): boolean;
    setCutsceneOrigin(p0: object, p1: object, p2: object, p3: object, p4: object): void;
    setCutscenePetComponentVariation(cutsceneEntName: string, p1: number, p2: number, p3: number, modelHash: string | number): void;
    getEntityIndexOfRegisteredEntity(cutsceneEntName: string, modelHash: string | number): MpEntity;
    requestCutscene2(cutsceneName: string, p1: number, p2: number): void;
    stopCutscene(p0: boolean): void;
    registerEntityForCutscene(cutscenePed: MpPed | object, cutsceneEntName: string, p2: number, modelHash: string | number, p4: number): void;
}

declare interface MpGameDatafile {
    objectValueGetType(objectData: object, key: string): number;
    arrayValueGetSize(arrayData: object): number;
    objectValueGetFloat(objectData: object, key: string): number;
    objectValueGetBoolean(objectData: object, key: string): boolean;
    arrayValueAddString(arrayData: object, value: string): void;
    objectValueAddBoolean(arrayData: object, key: string, value: boolean): void;
    arrayValueGetType(arrayData: object, arrayIndex: number): number;
    objectValueGetString(objectData: object, key: string): string;
    arrayValueGetInteger(arrayData: object, arrayIndex: number): number;
    arrayValueAddVector3(arrayData: object, valueX: number, valueY: number, valueZ: number): void;
    objectValueGetVector3(objectData: object, key: string): MpVector3;
    objectValueAddVector3(objectData: object, key: string, valueX: number, valueY: number, valueZ: number): void;
    arrayValueGetBoolean(arrayData: object, arrayIndex: number): boolean;
    arrayValueAddFloat(arrayData: object, value: number): void;
    objectValueAddArray(objectData: object, key: string): void;
    arrayValueAddObject(arrayData: object): void;
    objectValueGetInteger(objectData: object, key: string): number;
    objectValueGetArray(objectData: object, key: string): object;
    arrayValueGetObject(arrayData: object, arrayIndex: number): object;
    arrayValueGetVector3(arrayData: object, arraayIndex: number): MpVector3;
    objectValueAddString(objectData: object, key: string, value: string): void;
    objectValueAddObject(objectData: object, key: string): void;
    objectValueGetObject(objectData: object, key: string): void;
    arrayValueGetFloat(arrayData: object, arrayIndex: number): number;
    objectValueAddFloat(objectData: object, key: string, value: number): void;
    loadUgcFile(filename: string): boolean;
    arrayValueAddInteger(arrayData: object, value: number): void;
    arrayValueGetString(arrayData: object, arrayIndex: number): string;
    objectValueAddInteger(objectData: object, key: string, value: number): void;
    arrayValueAddBoolean(arrayData: object, value: boolean): void;
}

declare interface MpGameDecisionevent {
    isShockingEventInSphere(type: number, x: number, y: number, z: number, radius: number): boolean;
    removeShockingEvent(event: MpGameScript): boolean;
    suppressShockingEvent(type: number | number): void;
    clearDecisionMakerEventResponse(name: string | number, type: number): void;
    addShockingEventForEntity(type: number, entity: MpEntity | object, duration: number): MpGameScript;
    unblockDecisionMakerEvent(name: string | number, type: number): void;
    addShockingEventAtPosition(type: number, x: number, y: number, z: number, duration: number): MpGameScript;
    blockDecisionMakerEvent(name: string | number, type: number): void;
    removeAllShockingEvents(p0: boolean): void;
}

declare interface MpGameDecisionevent {
    isShockingEventInSphere(type: number, x: number, y: number, z: number, radius: number): boolean;
    removeShockingEvent(event: MpGameScript): boolean;
    suppressShockingEvent(type: number | number): void;
    clearDecisionMakerEventResponse(name: string | number, type: number): void;
    addShockingEventForEntity(type: number, entity: MpEntity | object, duration: number): MpGameScript;
    unblockDecisionMakerEvent(name: string | number, type: number): void;
    addShockingEventAtPosition(type: number, x: number, y: number, z: number, duration: number): MpGameScript;
    blockDecisionMakerEvent(name: string | number, type: number): void;
    removeAllShockingEvents(p0: boolean): void;
}

declare interface MpGameDecorator {
    decorIsRegisteredAsType(propertyName: string, type: number): boolean;
    decorRegister(propertyName: string, type: number): void;
}

declare interface MpGameDlc1 {
    getPropFromOutfit(outfit: object, slot: number, item: object): boolean;
    initShopPedComponent(outComponent: number): number;
    getShopPedQueryComponent(componentId: number, outComponent: number): number;
    getDlcVehicleData(dlcVehicleIndex: number, outData: object): boolean;
    getNumDlcWeaponComponents(dlcWeaponIndex: number): number;
    getDlcVehicleFlags(p0: number): number;
    getForcedComponent(componentHash: string | number, componentId: number, p2: object, p3: object, p4: object): void;
    getDlcWeaponComponentData(p0: object, p1: object, componentDataPtr: {
        attachBone: number;
        padding1: number;
        bActiveByDefault: number;
        padding2: number;
        unk: number;
        padding3: number;
        componentHash: number;
        padding4: number;
        unk2: number;
        padding5: number;
        componentCost: number;
        padding6: number;
        nameLabel: string;
        descLabel: string;
    }): boolean;
    getShopPedQueryOutput(p0: object, outfit: {
        mask: number;
        torso: number;
        pants: number;
        parachute: number;
        shoes: number;
        misc1: number;
        tops1: number;
        armour: number;
        crew: number;
        tops2: number;
        hat: number;
        glasses: number;
        earpiece: number;
        maskTexture: number;
        torsoTexture: number;
        pantsTexture: number;
        parachuteTexture: number;
        shoesTexture: number;
        misc1Texture: number;
        tops1Texture: number;
        armourTexture: number;
        crewTexture: number;
        tops2Texture: number;
        hatTexture: number;
        glassesTexture: number;
        earpiceTexture: number;
    }): void;
    getVariantComponent(componentHash: string | number, componentId: number, p2: object, p3: object, p4: object): void;
    getShopPedComponent(p0: object, p1: object): void;
    getDlcWeaponData(dlcWeaponIndex: number, outData: {
        emptyCheck: number;
        padding1: number;
        weaponHash: number;
        padding2: number;
        unk: number;
        padding3: number;
        weaponCost: number;
        padding4: number;
        ammoCost: number;
        padding5: number;
        ammoType: number;
        padding6: number;
        defaultClipSize: number;
        padding7: number;
        nameLabel: string;
        descLabel: string;
        desc2Label: string;
        upperCaseNameLabel: string;
    }): boolean;
    getNumPropsFromOutfit(p0: number | number, p1: number, p2: number, p3: boolean, p4: number, componentId: number): number;
    getShopPedOutfit(p0: object, p1: object): void;
    getNumForcedComponents(componentHash: string | number): number;
    isDlcDataEmpty(dlcData: number): boolean;
    getShopPedQueryProp(p0: object, p1: object): void;
    initShopPedProp(outProp: number): number;
    getDlcVehicleModel(dlcVehicleIndex: number): string | number;
}

declare interface MpGameDlc2 {
    nullify(variable: object, unused: object): boolean;
    isDlcPresent(dlcHash: string | number): boolean;
}

declare interface MpGameEntity {
    removeModelSwap(x: number, y: number, z: number, radius: number, originModel: string | number, newModel: string | number, p6: boolean): void;
    findAnimEventPhase(animDictionary: string, animName: string, p2: string, p3: object, p4: object): boolean;
    stopSynchronizedMapEntityAnim(p0: number, p1: number, p2: number, p3: number, p4: object, p5: number): boolean;
    createForcedObject(x: number, y: number, z: number, p3: object, modelHash: string | number, p5: boolean): void;
    createModelHideExcludingScriptObjects(x: number, y: number, z: number, radius: number, model: string | number, p5: boolean): void;
    setObjectAsNoLongerNeeded(object: MpObject): MpObject;
    removeForcedObject(p0: object, p1: object, p2: object, p3: object, p4: object): void;
    isAnEntity(handle: number): boolean;
    createModelHide(x: number, y: number, z: number, radius: number, model: string | number, p5: boolean): void;
    createModelSwap(x: number, y: number, z: number, radius: number, originalModel: string | number, newModel: string | number, p6: boolean): void;
    playSynchronizedMapEntityAnim(p0: number, p1: number, p2: number, p3: number, p4: object, p5: object, p6: object, p7: object, p8: number, p9: number, p10: object, p11: number): boolean;
    removeModelHide(p0: object, p1: object, p2: object, p3: object, p4: object, p5: object): void;
    wouldEntityBeOccluded(hash: string | number, x: number, y: number, z: number, p4: boolean): boolean;
    getEntityAnimDuration(animDict: string, animName: string): number;
}

declare interface MpGameFire {
    stopFireInRange(x: number, y: number, z: number, radius: number): void;
    getPedInsideExplosionArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number): MpEntity;
    isExplosionInArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
    getClosestFirePos(outPosition: MpVector3, x: number, y: number, z: number): MpVector3;
    addSpecfxExplosion(x: number, y: number, z: number, explosionType: number, explosionFx: string | number, damageScale: number, isAudible: boolean, isInvisible: boolean, cameraShake: number): void;
    getNumberOfFiresInRange(x: number, y: number, z: number, radius: number): number;
    startScriptFire(x: number, y: number, z: number, maxChildren: number, isGasFire: boolean): number;
    removeScriptFire(fireHandle: number): void;
    isExplosionInAngledArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, angle: number): boolean;
    isExplosionInSphere(explosionType: number, x: number, y: number, z: number, radius: number): boolean;
}

declare interface MpGameGameplay {
    displayOnscreenKeyboard(p0: number, windowTitle: string, p2: string, defaultText: string, defaultConcat1: string, defaultConcat2: string, defaultConcat3: string, maxInputLength: number): void; //TODO: Change windowTitle to mp.game.gameplay.windowTitles
    clearAreaOfVehicles(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, p6: boolean, p7: boolean, p8: boolean): void;
    getModelDimensions(modelHash: number | string, minimum: MpVector3, maximum: MpVector3): {
        readonly minimum: MpVector3;
        readonly maximum: MpVector3;
    };
    clearAreaOfCops(x: number, y: number, z: number, radius: number, flags: number): void;
    createIncidentWithEntity(p0: number, p1: MpEntity, p2: number, p3: number, outIncident: number): number;
    hasButtonCombinationJustBeenEntered(hash: number | string, amount: number): boolean;
    clearAreaOfProjectiles(x: number, y: number, z: number, radius: number, flags: number): void;
    areStringsEqual(string1: string, string2: string): boolean;
    registerEnumToSave(p0: object, name: string): void;
    overrideSaveHouse(p0: boolean, p1: number, p2: number, p3: number, p4: number, p5: boolean, p6: number, p7: number): boolean;
    setFireAmmoThisFrame(): object;
    clearAngledAreaOfVehicles(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: boolean, p8: boolean, p9: boolean, p10: boolean, p11: boolean): void;
    setFakeWantedLevel(fakeWantedLevel: number): void;
    getAngleBetween2dVectors(x1: number, y1: number, x2: number, y2: number): number;
    setMinigameInProgress(toggle: boolean): void;
    isBulletInAngledArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: boolean): boolean;
    addStuntJump(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12: number, p13: number, p14: number, p15: object, p16: object): number;
    acos(p0: number): number;
    setTimeScale(time: number): void;
    setFadeOutAfterArrest(toggle: boolean): void;
    compareStrings(str1: string, str2: string, matchCase: boolean, maxLength: number): number;
    addHospitalRestart(x: number, y: number, z: number, p3: number, p4: object): number;
    ignoreNextRestart(toggle: boolean): void;
    disablePoliceRestart(policeIndex: number, toggle: boolean): void;
    removeDispatchSpawnBlockingArea(p0: object): void;
    setWeatherTypeNow(weatherType: string): void;
    disableAutomaticRespawn(disableRespawn: boolean): void;
    isProjectileTypeInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, type: number, p7: boolean): boolean;
    isNextWeatherType(weatherType: string): boolean;
    getHeadingFromVector2d(dx: number, dy: number): number;
    getRandomFloatInRange(startRange: number, endRange: number): number;
    registerIntToSave(p0: object, name: string): void;
    isBulletInArea(p0: number, p1: number, p2: number, p3: number, p4: boolean): boolean;
    createIncident(p0: number, p2: number, p3: number, p4: number, p5: number, p6: number, outIncident: number): number;
    setRandomSeed(time: number): void;
    isPrevWeatherType(weatherType: string): boolean;
    setDispatchTimeBetweenSpawnAttempts(p0: object, p1: number): void;
    addPoliceRestart(p0: number, p1: number, p2: number, p3: number, p4: object): object;
    setDispatchTimeBetweenSpawnAttemptsMultiplier(p0: object, p1: number): void;
    setFadeOutAfterDeath(toggle: boolean): void;
    setSaveHouse(p0: object, p1: boolean, p2: boolean): void;
    isProjectileInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, ownedByPlayer: boolean): boolean;
    getBitsInRange(vars: number, rangeStart: number, rangeEnd: number): number;
    deleteIncident(incidentId: number): number;
    hasCheatStringJustBeenEntered(hash: number | string): boolean;
    setGamePaused(toggle: boolean): void;
    setWeatherTypeTransition(sourceWeather: string | number, targetWeather: string | number, transitionTime: number): void;
    setSuperJumpThisFrame(): object;
    stringToInt(string: string, outInteger: number): number;
    startSaveArray(p0: object, p1: number, arrayName: string): void;
    tan(p0: number): number;
    setRainFxIntensity(intensity: number): void;
    findSpawnPointInDirection(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, distance: number, spawnPoint: MpVector3): MpVector3;
    setDispatchIdealSpawnDistance(p0: number): void;
    setWeatherTypePersist(weatherType: string): void;
    absf(value: number): number;
    setGravityLevel(level: number): void;
    registerFloatToSave(p0: object, name: string): void;
    shootSingleBulletBetweenCoords(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, damage: number, p7: boolean, weaponHash: string | number, ownerPed: MpPed | object, isAudible: boolean, isInvisible: boolean, speed: number): void;
    atan2(p0: number, p1: number): number;
    setBitsInRange(vars: number, rangeStart: number, rangeEnd: number, p3: number): number;
    setBit(address: number, offset: number): number;
    clearAreaOfEverything(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, p6: boolean, p7: boolean): void;
    setRandomEventFlag(p0: boolean): void;
    hasBulletImpactedInArea(p0: number, p1: number, p2: number, p3: number, p4: boolean, p5: boolean): boolean;
    enableMpDlcMaps(toggle: boolean): void;
    terminateAllScriptsWithThisName(scriptName: string): void;
    setOverrideWeather(weatherType: string): void;
    disableStuntJumpSet(p0: number): void;
    clearArea(X: number, Y: number, Z: number, radius: number, p4: boolean, ignoreCopCars: boolean, ignoreObjects: boolean, p7: boolean): void;
    isAreaOccupied(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: boolean, p8: boolean, p9: boolean, p10: boolean, p11: object, p12: boolean): boolean;
    setExplosiveAmmoThisFrame(): object;
    isBitSet(address: number, offset: number): boolean;
    startSaveData(p0: object, p1: object, p2: boolean): void;
    atan(p0: number): number;
    setThisScriptCanBePaused(toggle: boolean): void;
    setWind(p0: number): void;
    isPositionOccupied(p0: number, p1: number, p2: number, p3: number, p4: boolean, p5: boolean, p6: boolean, p7: boolean, p8: boolean, p9: object, p10: boolean): boolean;
    setCreditsActive(toggle: boolean): void;
    setThisScriptCanRemoveBlipsCreatedByAnyScript(toggle: boolean): void;
    addStuntJumpAngled(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12: number, p13: number, p14: number, p15: number, p16: number, p17: object, p18: object): number
    clearAreaOfPeds(x: number, y: number, z: number, radius: number, flags: number): void;
    startSaveStruct(p0: object, p1: number, structName: string): void;
    registerSaveHouse(p0: number, p1: number, p2: number, p3: number, p4: object, p5: object, p6: object): object;
    setMissionFlag(toggle: boolean): void;
    getProfileSetting(profileSetting: number): number;
    setUnkMapFlag(flag: number): void;
    asin(p0: number): number;
    disableHospitalRestart(hospitalIndex: number, toggle: boolean): void;
    isIncidentValid(incidentId: number): number;
    registerBoolToSave(p0: object, name: string): void;
    getGroundZFor3dCoord(x: number, y: number, z: number, groundZ: number, unk: boolean): number;
    setSaveMenuActive(unk: boolean): void;
    isStringNullOrEmpty(string: string): boolean;
    getHashKey(value: string): string | number;
    getRandomIntInRange(startRange: number, endRange: number): number;
    setFadeInAfterDeathArrest(toggle: boolean): void;
    enableDispatchService(dispatchType: number, toggle: boolean): void;
    deleteStuntJump(p0: number): void;
    hasBulletImpactedInBox(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: boolean): boolean;
    clearAreaOfObjects(x: number, y: number, z: number, radius: number, flags: number): void;
    isBulletInBox(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: boolean): boolean;
    beginReplayStats(p0: object, p1: object): void;
    enableStuntJumpSet(p0: number): void;
    isPointObscuredByAMissionEntity(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: object): boolean;
    clearBit(address: number, offset: number): number;
    setWindDirection(direction: number): void;
    setWeatherTypeNowPersist(weatherType: string): void;
    registerTextLabelToSave(p0: object, name: string): void;
    setWindSpeed(speed: number): void;
    isProjectileTypeInAngledArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: object, p8: boolean): boolean;
    absi(value: number): number;
    usingMissionCreator(toggle: boolean): void;
    getDistanceBetweenCoords(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, useZ: boolean): number;
    isStringNull(string: string): boolean;
    getWeatherTypeTransition(p0: object, p1: object, progress_or_time: number): object;
    setFadeInAfterLoad(toggle: boolean): void;
    setWeatherTypeOverTime(weatherType: string, time: number): void;
    setCloudHatTransition(type: string, transitionTime: number): void;
    getFreeStackSlotsCount(stackSize: number): number;
    isSniperBulletInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
    setExplosiveMeleeThisFrame(): object;
}

declare interface MpGameGraphics {
    notify(text: any): any;                                                                                                      //TODO: Missing documentation
    drawText( text: string, position: [number, number], data: { font: number, color: [number, number, number, number], scale: [number, number], outline: boolean } ): any;
    drawText( text: string, position: [number, number, number], data: { font: number, color: [number, number, number, number], scale: [number, number], outline: boolean } ): any;
    drawText3d(text: any, pos: any, rotation: any, scale: any, r: any, g: any, b: any, a: any, initialOffsetScaled: any): any; //TODO: Missing documentation
    getSafeZoneSize(): any;                                                                                                      //TODO Missing documentation
    createCheckpoint(type: number, posX1: number, posY1: number, posZ1: number, posX2: number, posY2: number, posZ2: number, radius: number, colorR: number, colorG: number, colorB: number, alpha: number, reserved: number): number;
    hasStreamedTextureDictLoaded(textureDict: string): boolean;
    stopScreenEffect(effectName: string): void;
    drawDebugBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, r: number, g: number, b: number, alpha: number): void;
    setFlash(p0: number, p1: number, fadeIn: number, duration: number, fadeOut: number): void;
    loadTvChannel(tvChannel: number | string): boolean;
    hasNamedScaleformMovieLoaded(scaleformName: string): boolean;
    startParticleFxNonLoopedOnEntity(effectName: string, entity: MpEntity | object, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean;
    drawScaleformMovieFullscreen(scaleform: number, red: number, green: number, blue: number, alpha: number, unk: boolean): void;
    startParticleFxNonLoopedOnPedBone(effectName: string, ped: MpPed | object, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, boneIndex: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean;
    setTvAudioFrontend(toggle: boolean): void;
    requestScaleformMovie(scaleformName: string): number;
    setBlackout(enable: boolean): void;
    setTrackedPointInfo(point: MpObject | object, x: number, y: number, z: number, radius: number): object;
    setDebugLinesAndSpheresDrawingActive(enabled: boolean): void;
    setNightvision(toggle: boolean): void;
    startParticleFxLoopedOnEntity(effectName: string, entity: MpEntity | object, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number;
    drawScaleformMovie3dNonAdditive(scaleform: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, p7: number, p8: number, p9: number, scaleX: number, scaleY: number, scaleZ: number, p13: object): void;
    setScaleformMovieAsNoLongerNeeded(scaleformHandle: number): number;
    startScreenEffect(effectName: string, duration: number, looped: boolean): void;
    startParticleFxNonLoopedAtCoord(effectName: string, xPos: number, yPos: number, zPos: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): boolean;
    setParticleFxNonLoopedColour(r: number, g: number, b: number): void;
    drawMarker(type: number, posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, rotX: number, rotY: number, rotZ: number, scaleX: number, scaleY: number, scaleZ: number, colorR: number, colorG: number, colorB: number, alpha: number, bobUpAndDown: boolean, faceCamera: boolean, p19: number, rotate: boolean, textureDict: string, textureName: string, drawOnEnts: boolean): void;
    setTvVolume(volume: number): void;
    setTimecycleModifier(modifierName: string): void;
    getDecalWashLevel(decal: number): number;
    world3dToScreen2d(worldX: number, worldY: number, worldZ: number, screenX: number, screenY: number): {
        readonly x: number;
        readonly y: number;
    };
    getTextureResolution(textureDict: string, textureName: string): MpVector3;
    getScreenEffectIsActive(effectName: string): number;
    drawDebugText(text: string, x: number, y: number, z: number, r: number, g: number, b: number, alpha: number): void;
    drawRect(x: number, y: number, width: number, height: number, r: number, g: number, b: number, a: number): void;
    setTransitionTimecycleModifier(modifierName: string, transition: number): void;
    setForceVehicleTrails(toggle: boolean): void;
    addPetrolDecal(x: number, y: number, z: number, groundLvl: number, width: number, transparency: number): object;
    callScaleformMovieFunctionStringParams(scaleform: number, functionName: string, param1: string, param2: string, param3: string, param4: string, param5: string): void;
    drawScaleformMovie(scaleformHandle: number, x: number, y: number, width: number, height: number, red: number, green: number, blue: number, alpha: number, p9: number): void;
    drawSpotLightWithShadow(posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, colorR: number, colorG: number, colorB: number, distance: number, brightness: number, roundness: number, radius: number, falloff: number, shadow: number): void;
    removeDecalsInRange(x: number, y: number, z: number, range: number): void;
    setParticleFxLoopedEvolution(ptfxHandle: number, propertyName: string, amount: number, Id: boolean): void;
    setParticleFxBloodScale(p0: boolean): void;
    set2dLayer(layer: number): void;
    drawLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, r: number, g: number, b: number, alpha: number): void;
    setPtfxAssetNextCall(name: string): void;
    setScaleformMovieToUseSystemTime(scaleform: number, toggle: boolean): void;
    startParticleFxLoopedOnEntity2(effectName: string, entity: MpEntity | object, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number;
    setParticleFxLoopedAlpha(ptfxHandle: number, alpha: number): void;
    drawDebugCross(x: number, y: number, z: number, size: number, r: number, g: number, b: number, alpha: number): void;
    doesParticleFxLoopedExist(ptfxHandle: number): boolean;
    setParticleFxNonLoopedAlpha(alpha: number): void;
    setSeethrough(toggle: boolean): void;
    setParticleFxLoopedColour(ptfxHandle: number, r: number, g: number, b: number, p4: boolean): void;
    drawDebugLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, r: number, g: number, b: number, alpha: number): void;
    beginTextComponent(componentType: string): void;
    setFarShadowsSuppressed(toggle: boolean): void;
    hasScaleformContainerMovieLoadedIntoParent(scaleformHandle: number): boolean;
    setTimecycleModifierStrength(strength: number): void;
    moveVehicleDecals(p0: object, p1: object): void;
    hasScaleformMovieLoaded(scaleformHandle: number): boolean;
    getScreenActiveResolution(x: number, y: number): {
        readonly x: number;
        readonly y: number;
    };
    enableMovieSubtitles(toggle: boolean): void;
    drawScaleformMovie3d(scaleform: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, p7: number, p8: number, p9: number, scaleX: number, scaleY: number, scaleZ: number, p13: object): void;
    getScreenResolution(x: number, y: number): {
        readonly x: number;
        readonly y: number;
    };
    stopParticleFxLooped(ptfxHandle: number, p1: boolean): void;
    requestHudScaleform(hudComponent: number): void;
    setParticleFxShootoutBoat(p0: object): void;
    pushScaleformMovieFunctionFromHudComponent(hudComponent: number, functionName: string): boolean;
    washDecalsInRange(p0: object, p1: object, p2: object, p3: object, p4: object): void;
    enableAlienBloodVfx(toggle: boolean): void;
    transitionToBlurred(transitionTime: number): boolean;
    drawDebugText2d(text: string, x: number, y: number, z: number, r: number, g: number, b: number, alpha: number): void;
    startParticleFxNonLoopedOnPedBone2(effectName: string, ped: MpPed | object, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, boneIndex: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean;
    removeDecalsFromObjectFacing(obj: MpObject | object, x: number, y: number, z: number): void;
    setDrawOrigin(x: number, y: number, z: number, p3: object): void;
    drawDebugSphere(x: number, y: number, z: number, radius: number, r: number, g: number, b: number, alpha: number): void;
    pushScaleformMovieFunctionN(functionName: string): boolean;
    drawPoly(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, r: number, g: number, b: number, alpha: number): void;
    setParticleFxCamInsideNonplayerVehicle(p0: object, p1: boolean): void;
    setForcePedFootstepsTracks(toggle: boolean): void;
    destroyTrackedPoint(point: MpObject | object): void;
    addDecal(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12: number, p13: number, p14: number, p15: number, p16: number, p17: boolean, p18: boolean, p19: boolean): number;
    setParticleFxLoopedScale(ptfxHandle: number, scale: number): void;
    loadMovieMeshSet(movieMeshSetName: string): number;
    setScreenDrawPosition(x: number, y: number): void;
    pushScaleformMovieFunctionParameterString(value: string): void;
    setTvChannel(channel: number): void;
    requestScaleformMovie3(scaleformName: string): number;
    setStreamedTextureDictAsNoLongerNeeded(textureDict: string): void;
    pushScaleformMovieFunctionParameterInt(value: number): void;
    removeParticleFx(ptfxHandle: number, p1: boolean): void;
    isTrackedPointVisible(point: MpObject | object): boolean;
    requestScaleformMovieInstance(scaleformName: string): number;
    pushScaleformMovieFunctionParameterBool(value: boolean): void;
    isDecalAlive(decal: number):boolean;
    startParticleFxLoopedOnEntityBone(effectName: string, entity: MpEntity | object, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, boneIndex: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number;
    startParticleFxNonLoopedOnEntity2(effectName: string, entity: MpEntity | object, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, boneIndex: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): boolean;
    disableVehicleDistantlights(toggle: boolean): void;
    setNoisinessoveride(value: number): void;
    removeDecalsFromObject(obj: MpObject | object): void;
    drawScaleformMovieFullscreenMasked(scaleform1: number, scaleform2: number, red: number, green: number, blue: number, alpha: number): void;
    callScaleformMovieFunctionFloatParams(scaleform: number, functionName: string, param1: number, param2: number, param3: number, param4: number, param5: number): void;
    drawSpotLight(posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, colorR: number, colorG: number, colorB: number, distance: number, brightness: number, roundness: number, radius: number, falloff: number): void;
    drawBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, r: number, g: number, b: number, alpha: number): void;
    pushScaleformMovieFunctionParameterFloat(value: number): void;
    fadeDecalsInRange(p0: object, p1: object, p2: object, p3: object, p4: object): void;
    enableClownBloodVfx(toggle: boolean): void;
    drawDebugLineWithTwoColours(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, r1: number, g1: number, b1: number, r2: number, g2: number, b2: number, alpha1: number, alpha2: number): void;
    setParticleFxLoopedRange(ptfxHandle: number, range: number): void;
    removeParticleFxInRange(X: number, Y: number, Z: number, radius: number): void;
    startParticleFxLoopedOnEntityBone2(effectName: string, entity: MpEntity | object, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, boneIndex: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number;
    hasHudScaleformLoaded(hudComponent: number): boolean;
    requestStreamedTextureDict(textureDict: string, p1: boolean): void;
    setFrozenRenderingDisabled(enabled: boolean): void;
    startParticleFxLoopedAtCoord(effectName: string, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, p11: boolean): number;
    sittingTv(scaleform: number): string;
    setNoiseoveride(toggle: boolean): void;
    drawSprite(textureDict: string, textureName: string, screenX: number, screenY: number, scaleX: number, scaleY: number, heading: number, colorR: number, colorG: number, colorB: number, alpha: number): void;
    setPtfxAssetOldToNew(oldAsset: string, newAsset: string): void;
    releaseMovieMeshSet(movieMeshSet: number): void;
    removeDecal(decal: number): void;
    setParticleFxCamInsideVehicle(p0: boolean): void;
    callScaleformMovieFunctionMixedParams(scaleform: number, functionName: string, floatParam1: number, floatParam2: number, floatParam3: number, floatParam4: number, floatParam5: number, stringParam1: string, stringParam2: string, stringParam3: string, stringParam4: string, stringParam5: string): void;
    transitionFromBlurred(transitionTime: number): boolean;
    getScreenAspectRatio(b: boolean): number;
    startParticleFxLoopedOnPedBone(effectName: string, ped: MpPed | object, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, boneIndex: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number;
    drawLightWithRange(posX: number, posY: number, posZ: number, colorR: number, colorG: number, colorB: number, range: number, intensity: number): void;
    drawLightWithRangeAndShadow(x: number, y: number, z: number, r: number, g: number, b: number, range: number, intensity: number, shadow: number): void;
    startParticleFxNonLoopedAtCoord2(effectName: string, xPos: number, yPos: number, zPos: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): boolean;
    pushScaleformMovieFunction(scaleform: number, functionName: string): boolean;
    setParticleFxLoopedOffsets(ptfxHandle: number, x: number, y: number, z: number, rotX: number, rotY: number, rotZ: number): void;
    callScaleformMovieMethod(scaleform: number, method: string): void;
    drawTvChannel(xPos: number, yPos: number, xScale: number, yScale: number, rotation: number, r: number, g: number, b: number, alpha: number): void;
}

declare interface MpGameInterior {
    getInteriorAtCoordsWithType(x: number, y: number, z: number, interiorType: string): number;
    unpinInterior(interiorId: number): void;
    isValidInterior(interiorId: number): boolean;
    isInteriorPropEnabled(interiorId: number, propName: string): boolean;
    addPickupToInteriorRoomByName(pickup: MpPickup, roomName: string): void;
    refreshInterior(interiorId: number): void;
    disableInteriorProp(interiorId: number, propName: string): void;
    enableInteriorProp(interiorId: number, propName: string): void;
    disableInterior(interiorId: number, toggle: boolean): void;
    isInteriorReady(interiorId: number): boolean;
    isInteriorCapped(interiorId: number): boolean;
    getOffsetFromInteriorInWorldCoords(interiorId: number, x: number, y: number, z: number): MpVector3;
    hideMapObjectThisFrame(mapObjectHash: string): void;
    hideMapObjectThisFrame(mapObjectHash: number): void;
    getInteriorAtCoords(x: number, y: number, z: number): number;
    isInteriorDisabled(interiorId: number): boolean;
    capInterior(interiorId: number, toggle: boolean): void;
    getInteriorGroupId(interiorId: number): number;
    getInteriorFromCollision(x: number, y: number, z: number): number;
    areCoordsCollidingWithExterior(x: number, y: number, z: number): boolean;
    unkGetInteriorAtCoords(x: number, y: number, z: number, unk: number): number;
}

declare interface MpGameInterior {
    getInteriorAtCoordsWithType(x: number, y: number, z: number, interiorType: string): number;
    unpinInterior(interiorId: number): void;
    isValidInterior(interiorId: number): boolean;
    isInteriorPropEnabled(interiorId: number, propName: string): boolean;
    addPickupToInteriorRoomByName(pickup: MpPickup, roomName: string): void;
    refreshInterior(interiorId: number): void;
    disableInteriorProp(interiorId: number, propName: string): void;
    enableInteriorProp(interiorId: number, propName: string): void;
    disableInterior(interiorId: number, toggle: boolean): void;
    isInteriorReady(interiorId: number): boolean;
    isInteriorCapped(interiorId: number): boolean;
    getOffsetFromInteriorInWorldCoords(interiorId: number, x: number, y: number, z: number): MpVector3;
    hideMapObjectThisFrame(mapObjectHash: string): void;
    hideMapObjectThisFrame(mapObjectHash: number): void;
    getInteriorAtCoords(x: number, y: number, z: number): number;
    isInteriorDisabled(interiorId: number): boolean;
    capInterior(interiorId: number, toggle: boolean): void;
    getInteriorGroupId(interiorId: number): number;
    getInteriorFromCollision(x: number, y: number, z: number): number;
    areCoordsCollidingWithExterior(x: number, y: number, z: number): boolean;
    unkGetInteriorAtCoords(x: number, y: number, z: number, unk: number): number;
}

declare interface MpGameItemset {
    removeFromItemset(p0: object, p1: object): void;
    isInItemset(p0: object, p1: object): boolean;
    createItemset(p0: boolean): object;
    cleanItemset(p0: object): void;
    getIndexedItemInItemset(p0: object, p1: object): object;
    isItemsetValid(p0: object): boolean;
    getItemsetSize(p0: object): object;
    destroyItemset(p0: object): void;
    addToItemset(p0: object, p1: object): boolean;
}

declare interface MpGameMobile {
    getMobilePhoneRotation(rotation: MpVector3, p1: object): MpVector3;
    setPhoneLean(toggle: boolean): void;
    getMobilePhonePosition(position: MpVector3): MpVector3;
    setMobilePhonePosition(posX: number, posY: number, posZ: number): void;
    moveFinger(direction: number): void;
    createMobilePhone(phoneType: number): void;
    getMobilePhoneRenderId(renderId: number): number;
    setMobilePhoneRotation(rotX: number, rotY: number, rotZ: number, p3: object): void;
    setMobilePhoneScale(scale: number): void;
    scriptIsMovingMobilePhoneOffscreen(toggle: boolean): void;
    cellCamActivate(p0: boolean, p1: boolean): void;
}

declare interface MpGameMobile {
    getMobilePhoneRotation(rotation: MpVector3, p1: object): MpVector3;
    setPhoneLean(toggle: boolean): void;
    getMobilePhonePosition(position: MpVector3): MpVector3;
    setMobilePhonePosition(posX: number, posY: number, posZ: number): void;
    moveFinger(direction: number): void;
    createMobilePhone(phoneType: number): void;
    getMobilePhoneRenderId(renderId: number): number;
    setMobilePhoneRotation(rotX: number, rotY: number, rotZ: number, p3: object): void;
    setMobilePhoneScale(scale: number): void;
    scriptIsMovingMobilePhoneOffscreen(toggle: boolean): void;
    cellCamActivate(p0: boolean, p1: boolean): void;
}

declare interface MpGameObject {
    createMoneyPickups(x: number, y: number, z: number, value: number, amount: number, model: string | number): void;
    createPortablePickup2(pickupHash: string | number, x: number, y: number, z: number, placeOnGround: boolean, modelHash: string | number): MpPickup;
    getObjectOffsetFromCoords(xPos: number, yPos: number, zPos: number, heading: number, xOffset: number, yOffset: number, zOffset: number): MpVector3;
    getPickupCoords(p0: object): number;
    removeAllPickupsOfType(p0: object): void;
    isPointInAngledArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: boolean, p11: boolean): boolean;
    createPortablePickup(pickupHash: string | number, x: number, y: number, z: number, placeOnGround: boolean, modelHash: string | number): MpPickup;
    removePickup(pickup: MpPickup): void;
    highlightPlacementCoords(x: number, y: number, z: number, colorIndex: number): void;
    isAnyObjectNearPoint(x: number, y: number, z: number, range: number, p4: boolean): boolean;
    removeDoorFromSystem(doorHash: string | number): void;
    createObject(modelHash: string | number, x: number, y: number, z: number, networkHandle: boolean, createHandle: boolean, dynamic: boolean): MpObject;
    deleteObject(object: MpObject | object): MpObject | object;
    setTeamPickupObject(p0: object, p1: object, p2: object): void;
    createAmbientPickup(pickupHash: string | number, posX: number, posY: number, posZ: number, p4: number, value: number, modelHash: string | number, p7: boolean, p8: boolean): MpPickup;
    setDoorAccelerationLimit(doorHash: string | number, limit: number, p2: boolean, p3: boolean): void;
    getSafePickupCoords(x: number, y: number, z: number, p3: object, p4: object): MpVector3;
    addDoorToSystem(doorHash: string | number, modelHash: string | number, x: number, y: number, z: number, p5: number, p6: number, p7: number): void;
    hasClosestObjectOfTypeBeenBroken(p0: number, p1: number, p2: number, p3: number, modelHash: string | number, p5: object): boolean;
    setPickupRegenerationTime(p0: object, p1: object): void;
    hasPickupBeenCollected(p0: object): boolean;
    createPickupRotate(pickupHash: string | number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, flag: number, amount: number, p9: object, p10: boolean, modelHash: string | number): MpPickup;
    isObjectNearPoint(objectHash: string | number, x: number, y: number, z: number, range: number): boolean;
    isGarageEmpty(garage: object, p1: boolean, p2: number): boolean;
    createObjectNoOffset(modelHash: string | number, x: number, y: number, z: number, networkHandle: boolean, createHandle: boolean, dynamic: boolean): MpObject;
    doorControl(doorHash: string | number, x: number, y: number, z: number, locked: boolean, p5: number, p6: number, p7: number): void;
    doesPickupExist(p0: object): boolean;
    trackObjectVisibility(p0: object): void;
    setDoorAjarAngle(doorHash: string | number, ajar: number, p2: boolean, p3: boolean): void;
    getObjectFragmentDamageHealth(p0: object, p1: boolean): number;
    doesObjectOfTypeExistAtCoords(x: number, y: number, z: number, radius: number, hash: string | number, p5: boolean): boolean;
    doesDoorExist(doorHash: string | number): boolean;
    isDoorClosed(door: string | number): boolean;
    doesPickupObjectExist(p0: object): boolean;
    getClosestObjectOfType(x: number, y: number, z: number, radius: number, modelHash: string | number, isMissing: boolean, p6: boolean, p7: boolean): MpObject;
    getStateOfClosestDoorOfType(type: string | number, x: number, y: number, z: number, locked: boolean, heading: number): {
        readonly locked: boolean;
        readonly heading: boolean;
    };
    setForceObjectThisFrame(p0: object, p1: object, p2: object, p3: object): void;
    setStateOfClosestDoorOfType(type: string | number, x: number, y: number, z: number, locked: boolean, heading: number, p6: boolean): void;
    isPickupWithinRadius(pickupHash: string | number, x: number, y: number, z: number, radius: number): boolean;
    createPickup(pickupHash: string | number, posX: number, posY: number, posZ: number, p4: number, value: number, p6: boolean, modelHash: string | number): MpPickup;
}

declare interface MpGamePathfind {
    setRoadsBackToOriginalInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: number): void;
    getVehicleNodeProperties(x: number, y: number, z: number, density: number, flags: number): {
        readonly density: number;
        readonly flags: number;
    };
    updateNavmeshBlockingObject(p0: object, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: object): void;
    isPointOnRoad(x: number, y: number, z: number, vehicle: MpVehicle | object): boolean;
    getClosestRoad(x: number, y: number, z: number, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object, p9: object, p10: object): object;
    setRoadsInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, angle: number, unknown1: boolean, unknown2: boolean, unknown3: boolean): void;
    isVehicleNodeIdValid(vehicleNodeId: number): boolean;
    setRoadsBackToOriginal(p0: object, p1: object, p2: object, p3: object, p4: object, p5: object): void;
    getNthClosestVehicleNodeId(x: number, y: number, z: number, nth: number, nodetype: number, p5: number, p6: number): number;
    getClosestVehicleNode(x: number, y: number, z: number, outPosition: MpVector3, nodeType: number, p5: number, p6: number): MpVector3;
    getClosestMajorVehicleNode(x: number, y: number, z: number, outPosition: MpVector3, unknown1: number, unknown2: number): MpVector3;
    getStreetNameAtCoord(x: number, y: number, z: number, streetName: number, crossingRoad: number): {
        readonly streetName: number;
        readonly crossingRoad: number;
    };
    setPedPathsInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, unknown: boolean): void;
    addNavmeshRequiredRegion(p0: number, p1: number, p2: number): void;
    getNthClosestVehicleNodeFavourDirection(x: number, y: number, z: number, desiredX: number, desiredY: number, desiredZ: number, nthClosest: number, outPosition: MpVector3, outHeading: number, nodetype: number, p10: object, p11: object): {
        readonly outPosition: MpVector3;
        readonly outHeading: number;
    };
    removeNavmeshBlockingObject(p0: object): void;
    disableNavmeshInArea(p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object): void;
    getIsSlowRoadFlag(nodeID: number): boolean;
    getNthClosestVehicleNodeIdWithHeading(x: number, y: number, z: number, nthClosest: number, outPosition: MpVector3, outHeading: number, p6: object, p7: number, p8: number): MpVector3;
    getVehicleNodePosition(nodeId: number, outPosition: MpVector3): MpVector3;
    setIgnoreNoGpsFlag(ignore: boolean): void;
    getNthClosestVehicleNodeWithHeading(x: number, y: number, z: number, nthClosest: number, outPosition: MpVector3, heading: number, unknown1: object, unknown2: number, unknown3: number, unknown4: number): {
        readonly outPosition: MpVector3;
        readonly heading: number;
        readonly unknown1: object;
    };
    loadAllPathNodes(keepInMemory: boolean): boolean;
    getRandomVehicleNode(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, p6: boolean, outPosition: MpVector3, heading: number): {
        readonly outPosition: MpVector3;
        readonly outHeading: number;
    };
    getSupportsGpsRouteFlag(nodeID: number): boolean;
    calculateTravelDistanceBetweenPoints(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number;
    getSafeCoordForPed(x: number, y: number, z: number, onGround: boolean, outPosition: MpVector3, flags: number): MpVector3;
    setRoadsInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, unknown1: boolean, unknown2: boolean): void;
    setGpsDisabledZone(p0: object, p1: object, p2: object, p3: object, p4: object, p5: object): void;
    setPedPathsBackToOriginal(p0: object, p1: object, p2: object, p3: object, p4: object, p5: object): void;
    getNthClosestVehicleNode(x: number, y: number, z: number, nthClosest: number, outPosition: MpVector3, unknown1: object, unknown2: object, unknown3: object): MpVector3;
    isNavmeshLoadedInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
    generateDirectionsToCoord(x: number, y: number, z: number, p3: object, p4: number, vehicle: MpVehicle, p6: number): {
        readonly p4: number;
        readonly vehicle: MpVehicle;
        readonly p6: number;
    };
    addNavmeshBlockingObject(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: boolean, p8: object): object;
    getClosestVehicleNodeWithHeading(x: number, y: number, z: number, outPosition: MpVector3, outHeading: number, nodeType: number, p6: number, p7: number): {
        readonly outPosition: MpVector3;
        readonly outHeading: number;
    };
}

declare interface MpGamePed {
    isAValidLipstickColor(colorId: number): boolean;
    isAnyPedNearPoint(x: number, y: number, z: number, radius: number): boolean;
    setCreateRandomCops(toggle: boolean): void;
    removeActionModeAsset(asset: string): void;
    setScenarioPedsToBeReturnedByNextCommand(value: boolean): void;
    isCopPedInArea3d(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
    setAiWeaponDamageModifier(value: number): void;
    addScenarioBlockingArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: boolean, p8: boolean, p9: boolean): void;
    setGroupFormationSpacing(groupId: number, p1: number, p2: number, p3: number): void;
    isSynchronizedSceneRunning(sceneId: number): boolean;
    attachSynchronizedSceneToEntity(sceneId: number, entity: MpEntity | object, boneIndexId: number): void;
    setScenarioPedsSpawnInSphereArea(p0: object, p1: object, p2: object, p3: object, p4: object): void;
    requestActionModeAsset(asset: string): void;
    requestStealthModeAsset(asset: string): void;
    removeScenarioBlockingArea(p0: object, p1: boolean): void;
    canCreateRandomPed(unk: boolean): boolean;
    setGroupSeparationRange(groundHandle: number, separationRange: number): void;
    createNmMessage(startImmediately: boolean, messageId: number): void;
    setCreateRandomCopsOnScenarios(toggle: boolean): void;
    getAnimInitialOffsetRotation(animDict: string, animName: string, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, p8: number, p9: number): MpVector3;
    setScriptedConversionCoordThisFrame(x: number, y: number, z: number): void;
    getPedAsGroupMember(groupId: number, memberNumber: number): MpPed;
    getPedAsGroupLeader(groupId: number): MpPed;
    clearRelationshipBetweenGroups(relationship: number, group1: string | number, group2: string | number): void;
    getNumParentPedsOfType(type: number): number;
    isAValidBlushColor(colorId: number): boolean;
    isSynchronizedSceneLooped(sceneId: number): boolean;
    isPedRespondingToEvent(p0: object, p1: object): boolean;
    resetGroupFormationDefaultSpacing(groupHandle: number): void;
    setAiMeleeWeaponDamageModifier(modifier: number): void;
    getFirstParentIdForPedType(type: number): number;
    setSynchronizedSceneOrigin(sceneId: number, x: number, y: number, z: number, roll: number, pitch: number, yaw: number, p7: boolean): void;
    setPedAlternateWalkAnim(p0: object, p1: object, p2: object, p3: number, p4: boolean): void;
    detachSynchronizedScene(sceneId: number): void;
    isPedheadshotReady(handle: number): boolean;
    setSynchronizedScenePhase(sceneId: number, phase: number): void;
    setScenarioPedDensityMultiplierThisFrame(p0: number, p1: number): void;
    doesGroupExist(groupId: number): boolean;
    hasPedReceivedEvent(p0: object, p1: object): boolean;
    getRandomPedAtCoord(x: number, y: number, z: number, xRadius: number, yRadius: number, zRadius: number, pedType: number): MpPed;
    clearPedAlternateWalkAnim(p0: object, p1: number): void;
    setCreateRandomCopsNotOnScenarios(toggle: boolean): void;
    createSynchronizedScene(x: number, y: number, z: number, roll: number, pitch: number, yaw: number, p6: number): number;
    getGroupSize(groupId: number, unknown: object, sizeInMembers: number): void;
    removeGroup(groupId: number): void;
    createGroup(unused: number): number;
    removeStealthModeAsset(asset: string): void;
    setPedDensityMultiplierThisFrame(multiplier: number): void;
    getRelationshipBetweenGroups(group1: string | number, group2: string | number): number;
    getTattooZone(collection: string | number, overlay: string | number): number;
    isPedheadshotValid(handle: number): number;
    isAnyPedShootingInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: boolean, p7: boolean): boolean;
    createRandomPed(posX: number, posY: number, posZ: number): MpPed;
    removeRelationshipGroup(groupHash: string | number): void;
    setSynchronizedSceneRate(sceneId: number, rate: number): void;
    getAnimInitialOffsetPosition(animDict: string, animName: string, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, p8: number, p9: number): MpVector3;
    setRelationshipBetweenGroups(relationship: number, group1: string | number, group2: string | number): void;
    getClosestPed(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, outPed: MpPed, p7: boolean, p8: boolean, pedType: number): MpPed;
    disposeSynchronizedScene(scene: number): void;
    setGroupFormation(groupId: number, formationType: number): void;
    getNumHeadOverlayValues(overlayId: number): number;
    createPed(pedType: number, modelHash: string | number, x: number, y: number, z: number, heading: number, networkHandle: boolean, pedHandle: boolean): MpPed;
    setPedToRagdollWithFall(p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object, p9: object, p10: object, p11: object, p12: object, p13: object): boolean;
    getSynchronizedSceneRate(sceneId: number): number;
    setSynchronizedSceneLooped(sceneId: number, toggle: boolean): void;
    getPeadheadshotTxdString(handle: number): string;
    isAValidHairColor(colorId: number): boolean;
    getSynchronizedScenePhase(sceneId: number): number;
    hasActionModeAssetLoaded(asset: string): boolean;
    setPedReserveParachuteTintIndex(p0: object, p1: object): void;
    hasStealthModeAssetLoaded(asset: string): boolean;
    setPedNonCreationArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): void;
    addRelationshipGroup(name: string, groupHash: string | number): string | number;
    setTimeExclusiveDisplayTexture(p0: object, p1: boolean): void;
}

declare interface MpGamePlayer {
    setWantedLevelMultiplier(multiplier: number): void;
    setAllRandomPedsFlee(toggle: boolean): void;
    isSpecialAbilityMeterFull(): boolean;
    getWantedLevelRadius(): boolean;
    arePlayerStarsGreyedOut(): boolean;
    getPlayerTargetEntity(entity: MpEntity | object): boolean;
    setPlayerClothLockCounter(value: number): void;
    enableSpecialAbility(toggle: boolean): void;
    specialAbilityDepleteMeter(p1: boolean): void;
    getEntityPlayerIsFreeAimingAt(entity: MpEntity | object): boolean;
    specialAbilityChargeSmall(p1: boolean, p2: boolean): void;
    setDisableAmbientMeleeMove(toggle: boolean): void;
    specialAbilityReset(): void;
    isPlayerFreeAimingAtEntity(entity: MpEntity | object): boolean;
    specialAbilityFillMeter(p1: boolean): void;
    isSpecialAbilityActive(): boolean;
    intToPlayerindex(value: number): MpPlayer | object;
    setPoliceRadarBlips(toggle: boolean): void;
    setAllRandomPedsFleeThisFrame(): void;
    simulatePlayerInputGait(amount: number,gaitType: number,speed: number,p4: boolean,p5: boolean): void;
    forceCleanupForAllThreadsWithThisName(name: string, cleanupFlags: number): void;
    setIgnoreLowPriorityShockingEvents(toggle: boolean): void;
    getTimeSincePlayerHitVehicle(): number;
    disablePlayerFiring(toggle: boolean): void;
    specialAbilityLock(playerModel: number | string): void;
    setRunSprintMultiplierForPlayer(multiplier: number): void;
    isPlayerTargettingEntity(entity: MpEntity | object): boolean;
    hasAchievementBeenPassed(achievement: number): boolean;
    displaySystemSigninUi(unk: boolean): void;
    reserveEntityExplodesOnHighExplosionCombo(p1: number): void;
    setWantedLevelDifficulty(difficulty: number): void;
    specialAbilityDeactivateFast(): void;
    intToParticipantindex(value: number): number;
    setAutoGiveParachuteWhenEnterPlane(toggle: boolean): void;
    setPlayerClothPackageIndex(index: number): void;
    specialAbilityChargeNormalized(normalizedValue: number,p2: boolean): void;
    restorePlayerStamina(p1: number): void;
    setSpecialAbilityMultiplier(multiplier: number): void;
    setSwimMultiplierForPlayer(multiplier: number): void;
    setMaxWantedLevel(maxWantedLevel: number): void;
    startPlayerTeleport(x: number,y: number,z: number,heading: number,p5: boolean,p6: boolean,p7: boolean): void;
    setMeleeWeaponDefenseModifier(modifier: number): void;
    arePlayerFlashingStarsAboutToDrop(): boolean;
    setPlayerTargetingMode(targetMode: number): void;
    isSpecialAbilityEnabled(): boolean;
    specialAbilityChargeAbsolute(p1: number,p2: boolean): void;
    resetWantedLevelDifficulty(): void;
    forceCleanup(cleanupFlags: number): void;
    giveAchievementToPlayer(achievement: number): boolean;
    startFiringAmnesty(duration: number): void;
    disablePlayerVehicleRewards(): void;
    setAreasGeneratorOrientation(): void;
    isSpecialAbilityUnlocked(playerModel: number | string): boolean;
    hasForceCleanupOccurred(cleanupFlags: number): boolean;
    setAirDragMultiplierForPlayersVehicle(multiplier: number): void;
    getTimeSincePlayerDroveOnPavement(): number;
    specialAbilityDeactivate(): void;
    setDispatchCopsForPlayer(toggle: boolean): void;
    getTimeSincePlayerDroveAgainstTraffic(): number;
    setHudAnimStopLevel(toggle: boolean): void;
    canPlayerStartMission(): boolean;
    getTimeSincePlayerHitPed(): number;
    reportCrime(crimeType: number, wantedLvlThresh: number): void;
    specialAbilityChargeContinuous(p1: boolean): void;
    playerAttachVirtualBound(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): void;
    specialAbilityChargeMedium(p1: boolean,p2: boolean): void;
    specialAbilityUnlock(playerModel: number | string): void;
    specialAbilityChargeLarge(p1: boolean,p2: boolean): void;
    forceCleanupForThreadWithThisId(id: number, cleanupFlags: number): void;
    getWantedLevelThreshold(wantedLevel: number): number;
}

declare interface MpGameRecorder {
    start(mode: any): any;
    stop(save: any): any;
    isRecording(): boolean;
}

declare interface MpGameRope {
    setDisableFragDamage(object: MpObject | object, toggle: boolean): void;
    startRopeWinding(rope: MpObject | object): void;
    getRopeLastVertexCoord(rope: MpObject | object): void;
    pinRopeVertex(rope: MpObject | object, vertex: number, x: number, y: number, z: number): void;
    breakEntityGlass(p0: object, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: object, p10: boolean): void;
    getRopeVertexCount(rope: MpObject | object): number;
    attachEntitiesToRope(rope: MpObject | object, ent1: MpEntity | object, ent2: MpEntity | object, ent1_x: number, ent1_y: number, ent1_z: number, ent2_x: number, ent2_y: number, ent2_z: number, length: number, p10: boolean, p11: boolean, p12: object, p13: object): void;
    attachRopeToEntity(rope: MpObject | object, entity: MpEntity | object, x: number, y: number, z: number, p5: boolean): void;
    unpinRopeVertex(rope: MpObject | object, vertex: number): object;
    deleteRope(rope: MpObject | object): MpObject;
    ropeConvertToSimple(rope: MpObject | object): void;
    startRopeUnwindingFront(rope: MpObject | object): void;
    setDisableBreaking(rope: MpObject | object, enabled: boolean): object;
    getRopeLength(rope: MpObject | object): number;
    getCgoffset(rope: MpObject | object): MpVector3;
    deleteChildRope(rope: MpObject | object): object;
    detachRopeFromEntity(rope: MpObject | object, entity: MpEntity | object): void;
    setCgAtBoundcenter(rope: MpObject | object): void;
    ropeResetLength(rope: MpObject | object, length: boolean): object;
    ropeSetUpdatePinverts(rope: MpObject | object): void;
    stopRopeWinding(rope: MpObject | object): void;
    loadRopeData(rope: MpObject | object, rope_preset: string): object;
    ropeForceLength(rope: MpObject | object, length: number): object;
    setCgoffset(rope: MpObject | object, x: number, y: number, z: number): void;
    applyImpulseToCloth(posX: number, posY: number, posZ: number, vecX: number, vecY: number, vecZ: number, impulse: number): void;
    addRope(x: number, y: number, z: number, rotX: number, rotY: number, rotZ: number, length: number, ropeType: number, maxLength: number, minLength: number, p10: number, p11: boolean, p12: boolean, rigid: boolean, p14: number, breakWhenShot: boolean, unkPtr: object): MpObject | object;
    getRopeVertexCoord(rope: MpObject | object, vertex: number): object;
    setDamping(rope: MpObject | object, vertex: number, value: number): void;
    ropeDrawShadowEnabled(rope: MpObject | object, toggle: boolean): MpObject | object;
    doesRopeExist(rope: MpObject | object): MpObject | object;
    stopRopeUnwindingFront(rope: MpObject | object): void;
}

declare interface MpGameScript {
    getThreadName(threadId: number): string;
    getEventdata(p0: number, eventIndex: number, eventData: number, p3: number): number;
    getNumberOfInstancesOfStreamedScript(scriptHash: string | number): number;
    isThreadActive(threadId: number): boolean;
    setNoLoadingScreen(toggle: boolean): void;
    triggerScriptEvent(p0: number, argsStruct: MpVector3, argsStructSize: number, bitset: number): MpVector3;
    hasStreamedScriptLoaded(scriptHash: string | number): boolean;
    getNumberOfEvents(p0: number): number;
    requestScript(scriptName: string): void;
    getEventExists(p0: number, eventIndex: number): boolean;
    setStreamedScriptAsNoLongerNeeded(scriptHash: string | number): void;
    terminateThread(threadId: number): void;
    setScriptAsNoLongerNeeded(scriptName: string): void;
    requestStreamedScript(scriptHash: string | number): void;
    getEventAtIndex(p0: number, eventIndex: number): number;
    hasScriptLoaded(scriptName: string): boolean;
    isStreamedScriptRunning(scriptHash: string | number): boolean;
    doesScriptExist(scriptName: string): boolean;
}

declare interface MpGameStats {
    statSlotIsLoaded(p0: object): boolean;
    playstatsFriendActivity(p0: object, p1: object): void;
    statGetBoolMasked(statName: number | string, mask: number, p2: number): boolean;
    leaderboardsGetNumberOfColumns(p0: object, p1: object): object;
    statGetBool(statHash: number | string, outValue: boolean, p2: object): boolean;
    playstatsShopItem(p0: object, p1: object, p2: object, p3: object, p4: object): void;
    statSetGxtLabel(statName: number | string, value: string, save: boolean): boolean;
    statGetUserId(p0: object): string;
    statSetDate(statName: number | string, value: {
        year: number;
        month: number;
        day: number;
        hour: number;
        minute: number;
        second: number;
        milisecond: number;
    }, numFields: number, save): void;
    statGetNumberOfSeconds(statName: number | string): number;
    leaderboardsReadSuccessful(p0: object, p1: object, p2: object): boolean;
    playstatsClothChange(p0: object, p1: object, p2: object, p3: object, p4: object): void;
    statGetPos(p0: object, p1: object, p2: object, p3: object, p4: object): boolean;
    playstatsAwardXp(p0: object, p1: object, p2: object): void;
    statSetFloat(statName: number | string, value: number, save: boolean): boolean;
    statDeleteSlot(p0: object): object;
    statSetBool(statName: number | string, value: boolean, save: boolean): boolean;
    statGetLicensePlate(statName: number | string): string;
    statSetBoolMasked(statName: number | string, value: boolean, mask: number, save: boolean): boolean;
    leaderboards2ReadByRadius(p0: object, p1: object, p2: object): boolean;
    playstatsCheatApplied(cheat: string): void;
    statGetMaskedInt(p0: object, p1: object, p2: object, p3: object, p4: object): boolean;
    statSetProfileSetting(profileSetting: number, value: number): void;
    playstatsOddjobDone(p0: object, p1: object, p2: object): void;
    statSetLicensePlate(statName: number | string, str: string): boolean;
    statGetNumberOfMinutes(statName: number | string): number;
    statGetInt(statHash: number | string, outValue: number, p2: number): number;
    statSetMaskedInt(statName: number | string, p1: object, p2: object, p3: number, save: boolean): boolean;
    playstatsMissionOver(p0: object, p1: object, p2: object, p3: boolean, p4: boolean, p5: boolean): void;
    leaderboardsReadClear(p0: object, p1: object, p2: object): object;
    leaderboards2ReadByScoreInt(p0: object, p1: object, p2: object): boolean;
    statGetDate(statHash: number | string, p1: object, p2: object, p3: object): boolean;
    statSetUserId(statName: number | string, value: string, save: boolean): boolean;
    leaderboardsGetCacheDataRow(p0: object, p1: object, p2: object): boolean;
    leaderboards2ReadFriendsByRow(p0: object, p1: object, p2: object, p3: boolean, p4: object, p5: object): boolean;
    playstatsNpcInvite(p0: object): void;
    statIncrement(statName: number | string, value: number): void;
    playstatsRaceCheckpoint(p0: object, p1: object, p2: object, p3: object, p4: object): void;
    leaderboardsGetCacheExists(p0: object): boolean;
    statLoadPending(p0: object): boolean;
    statLoad(p0: number): boolean;
    statSetString(statName: number | string, value: string, save: boolean): boolean;
    leaderboards2ReadByRow(p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object): boolean;
    leaderboardsReadPending(p0: object, p1: object, p2: object): boolean;
    leaderboards2WriteData(p0: object): boolean;
    statSetInt(statName: number | string, value: number, save: boolean): boolean;
    leaderboardsCacheDataRow(p0: object): boolean;
    leaderboards2ReadByRank(p0: object, p1: object, p2: object): boolean;
    playstatsPropChange(p0: object, p1: object, p2: object, p3: object): void;
    playstatsMatchStarted(p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object): void;
    leaderboardsGetColumnType(p0: object, p1: object, p2: object): object;
    playstatsMissionStarted(p0: object, p1: object, p2: object, p3: boolean): void;
    statSetCurrentPosixTime(statName: number | string, p1: boolean): boolean;
    leaderboards2ReadByHandle(p0: object, p1: object): boolean;
    leaderboardsGetColumnId(p0: object, p1: object, p2: object): object;
    playstatsRankUp(p0: object): void;
    playstatsMissionCheckpoint(p0: object, p1: object, p2: object, p3: object): void;
    statGetFloat(statHash: number | string, outValue: number, p2: object): number;
    statSetPos(statName: number | string, x: number, y: number, z: number, save: boolean): boolean;
    playstatsWebsiteVisited(scaleformHash: number | string, p1: number): void;
    statSave(p0: number, p1: boolean, p2: number): boolean;
    statGetNumberOfDays(statName: number | string): number;
    statGetString(statHash: number | string, p1: number): string;
    leaderboards2ReadByScoreFloat(p0: object, p1: number, p2: object): boolean;
    statClearSlotForReload(statSlot: number): object;
    leaderboardsGetCacheTime(p0: object): object;
    statGetNumberOfHours(statName: number | string): number;
}

declare interface MpGameStreaming {
    removeClipSet(clipSet: string): void;
    requestCollisionAtCoord(x: number, y: number, z: number): object;
    removeAnimSet(animSet: string): void;
    isModelAVehicle(model: number | string): boolean;
    newLoadSceneStart(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: object): boolean;
    setUnkCameraSettings(x: number, y: number, z: number, rad: number, p4: object, p5: object): object;
    hasCollisionForModelLoaded(model: number | string): boolean;
    doesAnimDictExist(animDict: string): boolean;
    hasClipSetLoaded(clipSet: string): boolean;
    isModelInCdimage(model: number | string): boolean;
    prefetchSrl(p0: object): void;
    requestIpl(iplName: string): void;
    setDitchPoliceModels(toggle: boolean): void;
    loadScene(x: number, y: number, z: number): void;
    removeNamedPtfxAsset(fxName: string): void;
    setStreaming(toggle: boolean): void;
    requestAnimSet(animSet: string): void;
    setGamePausesForStreaming(toggle: boolean): void;
    setReducePedModelBudget(toggle: boolean): void;
    setReduceVehicleModelBudget(toggle: boolean): void;
    hasNamedPtfxAssetLoaded(fxName: string): boolean;
    isIplActive(iplName: string): boolean;
    setPedPopulationBudget(p0: number): void;
    requestCollisionForModel(model: number | string): void;
    requestModel(model: number | string, cb?: Function): void;
    hasModelLoaded(model: number | string): boolean;
    requestModel2(model: number | string): void;
    setSrlTime(p0: number): void;
    newLoadSceneStartSafe(p0: number, p1: number, p2: number, p3: number, p4: object): boolean;
    getIdealPlayerSwitchType(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number;
    requestNamedPtfxAsset(fxName: string): void;
    setHdArea(x: number, y: number, z: number, ground: number): void;
    setFocusArea(x: number, y: number, z: number, offsetX: number, offsetY: number, offsetZ: number): void;
    isModelValid(model: number | string): boolean;
    setPlayerSwitchLocation(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: object): void;
    hasAnimSetLoaded(animSet: string): boolean;
    requestAdditionalCollisionAtCoord(p0: number, p1: number, p2: number): void;
    setVehiclePopulationBudget(p0: number): void;
    hasAnimDictLoaded(animDict: string): boolean;
    requestClipSet(clipSet: string): void;
    requestAnimDict(animDict: string): void;
    setInteriorActive(interiorID: number, toggle: boolean): void;
    setModelAsNoLongerNeeded(model: number | string): void;
    removeIpl(iplName: string): void;
    removeAnimDict(animDict: string): void;
    startPlayerSwitch(from: MpPed | object, to: MpPed | object, flags: number, switchType: number): void;
}

declare interface MpGameSystem {
    sin(value: number): number;
    ceil(value: number): number;
    vdist(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number;
    wait(ms: number): void;
    settimerb(value: number): void;
    vmag(p0: number, p1: number, p2: number): number;
    sqrt(value: number): number;
    shiftRight(value: number, bitShift: number): number;
    vmag2(p0: number, p1: number, p2: number): number;
    vdist2(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number;
    startNewScriptWithArgs(scriptName: string, args: object, argCount: number, stackSize: number): number;
    toFloat(value: number): number;
    settimera(value: number): void;
    startNewStreamedScriptWithArgs(scriptHash: string | number, args: object, argCount: number, stackSize: number): number;
    cos(value: number): number;
    pow(base: number, exponent: number): number;
    startNewScript(scriptName: string, stackSize: number): number;
    startNewStreamedScript(scriptHash: string | number, stackSize: number): number;
    shiftLeft(value: number, bitShift: number): number;
    round(value: number): number;
    floor(value: number): number;
}

declare interface MpGameTime {
    pauseClock(toggle: boolean): void;
    setClockTime(hour: number, minute: number, second: number): void;
    getLocalTime(year: number, month: number, day: number, hour: number, minute: number, second: number): {
        readonly year: number;
        readonly month: number;
        readonly day: number;
        readonly hour: number;
        readonly minute: number;
        readonly second: number;
    };
    getLocalTimeGmt(year: number, month: number, day: number, hour: number, minute: number, second: number): {
        readonly year: number;
        readonly month: number;
        readonly day: number;
        readonly hour: number;
        readonly minute: number;
        readonly second: number;
    };
    setClockDate(day: number, month: number, year: number): void;
    advanceClockTimeTo(hour: number, minute: number, second: number): void;
    addToClockTime(hour: number, minute: number, second: number): void;
    getPosixTime(year: number, month: number, day: number, hour: number, minute: number, second: number): {
        readonly year: number;
        readonly month: number;
        readonly day: number;
        readonly hour: number;
        readonly minute: number;
        readonly second: number;
    };
}

declare interface MpGameUi {
    hasAdditionalTextLoaded(slot: number): boolean;
    flashAbilityBar(p0: object): void;
    setTextProportional(p0: boolean): void;
    addTextComponentInteger(value: number): void;
    setPlayerCashChange(cash: number, bank: number): void;
    setTextScale(sizex: number, sizey: number): void;
    setRadarZoom(zoomLevel: number): void;
    showHudComponentThisFrame(id: number): void;
    addTextComponentSubstringCash(cashAmount: number, p1: boolean): void;
    restartFrontendMenu(menuHash: number | string, p1: number): void;
    addTextComponentSubstringTime(timestamp: number, flags: number): void;
    isNamedRendertargetLinked(hash: number | string): boolean;
    lockMinimapPosition(x: number, y: number): void;
    getTextSubstring(text: string, position: number, length: number): string;
    addTextComponentSubstringLocalized(gxtEntryHash: number | string): void;
    setNotificationFlashColor(red: number, green: number, blue: number, alpha: number): void;
    keyHudColour(p0: boolean, p1: object): void;
    getNamedRendertargetRenderId(p0: string): object;
    doesTextBlockExist(gxt: string): boolean;
    setNotificationMessage(picName1: string, picName2: string, flash: boolean, iconType: number, sender: string, subject: string): number;
    setTextChatUnk(p0: boolean): void;
    setNotificationTextEntry(type: string): void;
    getHudComponentPosition(p0: object): number;
    setRadarBigmapEnabled(toggleBigMap: boolean, showFullMap: boolean): void;
    displayHelpTextFromStringLabel(p0: object, loop: boolean, beep: boolean, shape: number): void;
    setTextEntry(text: string): void;
    displayAreaName(toggle: boolean): void;
    lockMinimapAngle(angle: number): void;
    clearAdditionalText(p0: number, p1: boolean): void;
    drawNotification(blink: boolean, p1: boolean): number;
    setGpsFlashes(toggle: boolean): void;
    drawNotification3(blink: boolean, p1: boolean): number;
    hideSpecialAbilityLockonOperation(p0: object, p1: boolean): void;
    setTextEdge(p0: number, r: number, g: number, b: number, a: number): void;
    drawNotification2(blink: boolean, p1: boolean): number;
    resetHudComponentValues(id: number): void;
    setTextDropshadow(distance: number, r: number, g: number, b: number, a: number): void;
    addBlipForRadius(posX: number, posY: number, posZ: number, radius: number): MpBlip;
    enableDeathbloodSeethrough(p0: boolean): void;
    setTextJustification(justifyType: number): void;
    hasHeadDisplayLoaded(headDisplayId: number): boolean;
    clearFloatingHelp(p0: object, p1: boolean): void;
    setTextGxtEntry(entry: string): void;
    setNotificationMessageClanTag2(picName1: string, picName2: string, flash: boolean, iconType1: number, sender: string, subject: string, duration: number, clanTag: string, iconType2: number, p9: number): number;
    setTextEntryForWidth(text: string): void;
    registerNamedRendertarget(p0: string, p1: boolean): boolean;
    setMinimapBlockWaypoint(toggle: boolean): void;
    addTrevorRandomModifier(headDisplayId: number): boolean;
    setRadarAsInteriorThisFrame(interior: number | string, x: number, y: number, z: number, p4: number): void;
    addBlipForCoord(x: number, y: number, z: number): MpBlip;
    objectDecalToggle(hash: number | string): void;
    setGpsFlags(p0: number, p1: number): void;
    setNotificationMessageClanTag(picName1: string, picName2: string, flash: boolean, iconType: number, sender: string, subject: string, duration: number, clanTag: string): number;
    setTextRenderId(renderId: number): void;
    setMissionName(p0: boolean, name: string): void;
    requestAdditionalText2(gxt: string, slot: number): void;
    addNextMessageToPreviousBriefs(p0: boolean): void;
    setTextWrap(start: number, end: number): void;
    setHeadDisplayFlag(headDisplayId: number, sprite: number, toggle: boolean): void;
    setTextFont(fontType: number): void;
    hideHudComponentThisFrame(id: number): void;
    toggleStealthRadar(toggle: boolean): void;
    setTextRightJustify(toggle: boolean): void;
    addTextComponentSubstringPlayerName(text: string): void;
    isMinimapAreaRevealed(x: number, y: number, radius: number): boolean;
    setWarningMessage3(entryHeader: string, entryLine1: string, instructionalKey: object, entryLine2: string, p4: object, p5: object, p6: object, p7: object, p8: object, p9: boolean): void;
    requestAdditionalText(gxt: string, slot: number): void;
    setFrontendActive(active: boolean): void;
    setMinimapComponent(p0: number, p1: boolean, p2: number): object;
    setPlayerBlipPositionThisFrame(x: number, y: number): void;
    isNamedRendertargetRegistered(p0: string): boolean;
    setWarningMessage(entryLine1: string, instructionalKey: number, entryLine2: string, p3: boolean, p4: object, p5: object, p6: object, background: boolean): void;
    getLabelText(labelName: string): string;
    getHudColour(hudIndex: number, r: number, g: number, b: number, a: number): {
        readonly hudIndex: number;
        readonly r: number;
        readonly g: number;
        readonly b: number;
        readonly a: number;
    };
    getLengthOfStringWithThisTextLabel(gxt: string): number;
    setTextComponentFormat(inputType: string): void;
    getTextScreenWidth(p0: boolean): number;
    removeBlip(blip: MpBlip): MpBlip;
    isStreamingAdditionalText(p0: number): boolean;
    setCursorSprite(spriteId: number): void;
    clearHelp(toggle: boolean): void;
    setMinimapVisible(toggle: boolean): void;
    addTextComponentSubstringWebsite(website: string): void;
    displayHelpTextThisFrame(message: string, p1: boolean): void;
    displayCash(toggle: boolean): void;
    setAbilityBarValue(p0: number, p1: number): void;
    drawSubtitleTimed(time: number, p1: boolean): void;
    displayRadar(Toggle: boolean): object;
    flashWantedDisplay(p0: boolean): object;
    setTextLeading(p0: boolean): void;
    displayAmmoThisFrame(display: boolean): void;
    displayHud(toggle: boolean): void;
    setHudComponentPosition(id: number, p1: number, p2: number): void;
    setLoadingPromptTextEntry(string: string): void;
    doesTextLabelExist(gxt: string): boolean;
    hasThisAdditionalTextLoaded(gxt: string, slot: number): boolean;
    getTextSubstringSafe(text: string, position: number, length: number, maxLength: number): string;
    setTextEntry2(p0: string): void;
    isHudComponentActive(id: number): boolean;
    respondingAsTemp(p0: number): void;
    showLoadingPrompt(busySpinnerType: number): void;
    addBlipForPickup(pickup: MpPickup): MpBlip;
    removeNotification(notifactionId: number): void;
    setTextColour(red:  number, green:  number, blue:  number, alpha:  number): void;
    setTextCentre(align: boolean): void;
    setWidescreenFormat(p0: object): void;
    addTextComponentItemString(labelName: string): void;
    setRadarZoomLevelThisFrame(zoomLevel: number): void;
    drawText(x: number, y: number): void;
    getTextSubstringSlice(text: string, startPosition: number, endPosition: number): string;
    setHeadDisplayWanted(headDisplayId: number, wantedlvl: number): void;
    clearThisPrint(p0:string): void;
    getStreetNameFromHashKey(hash: number | string): string;
    setMinimapAttitudeIndicatorLevel(altitude: number, p1: boolean): void;
    getTextScaleHeight(size: number, font: number): number;
    setWarningMessage2(entryHeader: string, entryLine1: string, instructionalKey: number, entryLine2: string, p4: boolean, p5: object, p6: object, p7: object, background: boolean): void;
    isScriptedHudComponentActive(id: number): boolean;
    setHeadDisplayString(headDisplayId: number, string: string): void;
    setPauseMenuActive(toggle: boolean): void;
    isPauseMenuActive(): boolean;
    hideScriptedHudComponentThisFrame(id: number): void;
    addTextComponentFloat(value: number, decimalPlaces: number): void;
    releaseNamedRendertarget(p0: object): boolean;
    showWeaponWheel(forcedShow: boolean): void;
    activateFrontendMenu(menuhash: number | string, Toggle_Pause: boolean, p2: number): void;
    setUseridsUihidden(p0: object, p1: object): boolean;
    drawNotification4(blink: boolean, p1: boolean): number;
    getLengthOfLiteralString(string: string): number;
    setHudColour(hudIndex: number, r: number, g: number, b: number, a: number): void;
    linkNamedRendertarget(hash: number | string): void;
    setMinimapRevealed(toggle: boolean): void;
    beginTextCommandSetBlipName(gxtentry: string): void;
    getBlipInfoIdCoord(p0: number): MpVector3;
    setMultiplayerHudCash(p0: number, p1: number): void;
    setNewWaypoint(x: number, y: number): void;
}

declare interface MpGameUnk {
    getBroadcastFinishedLosSound(p0: boolean): void;
}

declare interface MpGameVehicle {
    getRandomVehicleModelInMemory(p0: boolean, modelHash: number, p2: number): {
        readonly modelHash: number;
        readonly p2: number;
    };
    hasPreloadModsFinished(p0: object): boolean;
    getTotalDurationOfVehicleRecording(p0: object, p1: object): object;
    setVehicleModelIsSuppressed(model: number | string, suppressed: boolean): void;
    getTotalDurationOfVehicleRecordingId(p0: object): number;
    hasVehicleAssetLoaded(vehicleAsset: number): boolean;
    isPlaybackGoingOnForVehicle(p0: object): boolean;
    getRotationOfVehicleRecordingAtTime(p0: object, p1: number, p2: object): number;
    getVehicleRecordingId(p0: object, p1: object): object;
    deleteScriptVehicleGenerator(vehicleGenerator: number): void;
    setVehicleDensityMultiplierThisFrame(multiplier: number): void;
    setFarDrawVehicles(toggle: boolean): void;
    startPlaybackRecordedVehicleUsingAi(p0: object, p1: object, p2: object, p3: number, p4: object): void;
    getVehicleModelMaxNumberOfPassengers(modelHash: number | string): number;
    setGarbageTrucks(toggle: boolean): object;
    getPositionInRecording(p0: object): number;
    getVehicleClassMaxAcceleration(p0: object): number;
    addVehicleStuckCheckWithWarp(p0: object, p1: number, p2: object, p3: boolean, p4: boolean, p5: boolean, p6: object): void;
    hasVehicleRecordingBeenLoaded(p0: object, p1: object): boolean;
    getRandomVehicleInSphere(x: number, y: number, z: number, radius: number, modelHash: number | string, flags: number): MpVehicle | object;
    isThisModelAQuadbike(model: number | string): boolean;
    startPlaybackRecordedVehicle(p0: object, p1: object, p2: object, p3: boolean): void;
    getCurrentPlaybackForVehicle(p0: object): object;
    isThisModelABoat(model: number | string): boolean;
    removeVehiclesFromGeneratorsInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, unk: object): void;
    getVehicleClassMaxBraking(p0: object): number;
    getVehicleClassMaxAgility(p0: object): number;
    getVehicleModelMaxTraction(modelHash: number | string): number;
    stopPlaybackRecordedVehicle(p0: object): void;
    getTimePositionInRecording(p0: object): number;
    deleteMissionTrain(train: MpVehicle): MpVehicle;
    setAllLowPriorityVehicleGeneratorsActive(active: boolean): void;
    isAnyVehicleNearPoint(x: number, y: number, z: number, radius: number): boolean;
    pausePlaybackRecordedVehicle(p0: object): void;
    createMissionTrain(variation: number, x: number, y: number, z: number, direction: boolean): MpVehicle | object;
    setPlaybackSpeed(p0: object, speed: number): object;
    setPlaybackToUseAiTryToRevertBackLater(p0: object, p1: object, p2: object, p3: boolean): void;
    setVehicleShootAtTarget(driver: MpPed | object, entity: MpEntity | object, xTarget: number, yTarget: number, zTarget: number): void;
    preloadVehicleMod(p0: object, p1: object, p2: object): void;
    startPlaybackRecordedVehicleWithFlags(p0: object, p1: object, p2: object, p3: object, p4: object, p5: object): void;
    isCopVehicleInArea3d(x1: number, x2: number, y1: number, y2: number, z1: number, z2: number): boolean;
    isThisModelACar(model: number | string): boolean;
    setRandomTrains(toggle: boolean): void;
    requestVehicleAsset(vehicleHash: number | string, vehicleAsset: number): void;
    removeVehicleStuckCheck(p0: object): void;
    setRandomBoats(toggle: boolean): object;
    setCargobobHookPosition(p0: object, p1: number, p2: number, p3: boolean): void;
    unpausePlaybackRecordedVehicle(p0: object): void;
    getVehicleModelAcceleration(modelHash: number | string): number;
    skipTimeInPlaybackRecordedVehicle(p0: object, p1: number): void;
    isThisModelAnEmergencyBoat(model: number | string): boolean;
    doesVehicleExistWithDecorator(decorator: string): boolean;
    createScriptVehicleGenerator(x: number, y: number, z: number, heading: number, p4: number, p5: number, modelHash: number | string, p7: number, p8: number, p9: number, p10: number, p11: boolean, p12: boolean, p13: boolean, p14: boolean, p15: boolean, p16: number): number;
    isThisModelAPlane(model: number | string): boolean;
    getNumModColors(p0: number, p1: boolean): number;
    skipToEndAndStopPlaybackRecordedVehicle(p0: object): void;
    isThisModelATrain(model: number | string): boolean;
    removeVehicleAsset(vehicleAsset: number): void;
    isPlaybackUsingAiGoingOnForVehicle(p0: object): boolean;
    createVehicle(modelHash: number | string, x: number, y: number, z: number, heading: number, networkHandle: boolean, vehiclehandle: boolean): object;
    requestVehicleRecording(p0: object, p1: object): void;
    getDisplayNameFromVehicleModel(modelHash: number | string): string;
    setRandomVehicleDensityMultiplierThisFrame(multiplier: number): void;
    getRandomVehicleBackBumperInSphere(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): MpVehicle | object;
    isThisModelABike(model: number | string): boolean;
    setMissionTrainAsNoLongerNeeded(train: MpVehicle, p1: boolean): MpVehicle;
    isThisModelABicycle(model: number | string): boolean;
    setAllVehicleGeneratorsActiveInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: boolean, p7: boolean): void;
    getRandomVehicleFrontBumperInSphere(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): MpVehicle | object;
    setNumberOfParkedVehicles(value: number): object;
    isVehicleInGarageArea(garageName: string, vehicle: MpVehicle | object): boolean;
    getPositionOfVehicleRecordingAtTime(p0: object, p1: number, p2: object): number;
    setScriptVehicleGenerator(vehicleGenerator: object, enabled: boolean): void;
    getVehicleClassMaxTraction(p0: object): number;
    getVehicleModelMaxBraking(modelHash: number | string): number;
    isThisModelAHeli(model: number | string): boolean;
    getVehicleClassFromName(modelHash: number | string): number;
    setParkedVehicleDensityMultiplierThisFrame(multiplier: number): void;
    removeVehicleRecording(p0: object, p1: object): void;
    getVehicleModelMaxSpeed(modelHash: number | string): number;
    disableVehicleWeapon(disabled: boolean, weaponHash: number | string, vehicle: MpVehicle | object, owner: MpPed | object): void;
    doesScriptVehicleGeneratorExist(vehicleGenerator: number): boolean;
    getClosestVehicle(x: number, y: number, z: number, radius: number, modelHash: number | string, flags: number): MpVehicle | object;
    displayDistantVehicles(toggle: boolean): void;
    switchTrainTrack(intersectionId: number, state: boolean): object;
}

declare interface MpGameWater {
    testVerticalProbeAgainstAllWater(x: number, y: number, z: number, p3: object, p4: object): boolean;
    testProbeAgainstAllWater(p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7s: object): boolean;
    getWaterHeightNoWaves(x: number, y: number, z: number, height: number): void;
    setWavesIntensity(intensity: number): void;
    modifyWater(x: number, y: number, radius: number, height: number): void;
    getWaterHeight(x: number, y: number, z: number, height: number): number;
    testProbeAgainstWater(startX: number, startY: number, startZ: number, endX: number, endY: number, endZ: number, p6: boolean): boolean;
}

declare interface MpGameWeapon {
    getWeaponComponentTypeModel(componentHash: string | number): string | number;
    giveWeaponComponentToWeaponObject(weaponObject: MpObject, addonHash: string | number): void;
    hasWeaponAssetLoaded(weaponHash: string | number): boolean;
    getWeaponDamageType(weaponHash: string | number): number;
    getWeapontypeSlot(weaponHash: string | number): string | number;
    requestWeaponHighDetailModel(weaponObject: MpObject | object): void;
    requestWeaponAsset(weaponHash: string | number, p1: number, p2: number): void;
    getWeaponClipSize(weaponHash: string | number): number;
    doesWeaponTakeWeaponComponent(weaponHash: string | number, componentHash: string | number): boolean;
    getWeaponTintCount(weaponHash: string | number): number;
    hasVehicleGotProjectileAttached(driver: MpPed, vehicle: MpVehicle, weapon: number | string, p3: any): boolean;
    hasWeaponGotWeaponComponent(weapon: MpObject, addonHash: string | number): boolean;
    isWeaponValid(weaponHash: string | number): boolean;
    createWeaponObject(weaponHash: string | number, ammoCount: number, x: number, y: number, z: number, showWorldModel: boolean, heading: number, p7: any): MpObject;
    setPedAmmoToDrop(p0: any, p1: any): void;
    removeWeaponAsset(weaponHash: string | number): void;
    giveWeaponObjectToPed(weaponObject: MpObject, ped: MpPed): void;
    getWeaponComponentHudStats(p0: any, p1: any): boolean;
    canUseWeaponOnParachute(weaponHash: string | number): boolean;
    getWeapontypeGroup(weaponHash: string | number): string | number;
    enableLaserSightRendering(toggle: boolean): void;
    getWeaponObjectTintIndex(weapon: MpEntity): number;
    setFlashLightFadeDistance(distance: number): void;
    getWeaponHudStats(weaponHash: string | number, data: {
        hudDamage: number;
        hudSpeed: number;
        hudCapacity: number;
        hudAccuracy: number;
        hudRange: number;
    }): boolean;
    getWeapontypeModel(weaponHash: string | number): string | number;
    removeWeaponComponentFromWeaponObject(p0: any, p1: any): void;
    setWeaponObjectTintIndex(weapon: MpEntity, tint: number): void;
    removeAllProjectilesOfType(weaponhash: string | number, p1: boolean): void;
}

declare interface MpGameWorldprobe {
    startShapeTestCapsule(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number, flags: number, ignoreEntity: MpEntity, p9: number): number;
    castRayPointToPoint(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, flags: number, ignoreEntity: MpEntity, p8: number): number;
    getShapeTestResult(rayHandle: number, hit: boolean, endCoords: MpVector3, surfaceNormal: MpVector3, entityHit: MpEntity): {
        readonly hit: boolean;
        readonly endCoords: MpVector3;
        readonly surfaceNormal: MpVector3;
        readonly entityHit: MpEntity;
    };
    getShapeTestResultEx(rayHandle: number, hit: boolean, endCoords: MpVector3, surfaceNormal: MpVector3, _materialHash: number, entityHit: MpEntity): {
        readonly hit: boolean;
        readonly endCoords: MpVector3;
        readonly surfaceNormal: MpVector3;
        readonly _materialHash: number;
        readonly entityHit: MpEntity;
    };
    startShapeTestLosProbe(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, flags: number, ignoreEntity: MpEntity, p8: number): number;
    startShapeTestBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, rotX: number, rotY: number, rotZ: number, p9: object, p10: object, ignoreEntity: MpEntity, p12: object): number;
}

declare interface MpGameZone {
    getZoneAtCoords(x: number, y: number, z: number): number;
    getZonePopschedule(zoneId: number): number;
    clearPopscheduleOverrideVehicleModel(scheduleId: number): void;
    getZoneScumminess(zoneId: number): number;
    overridePopscheduleVehicleModel(scheduleId: number, vehicleHash: string): void;
    overridePopscheduleVehicleModel(scheduleId: number, vehicleHash: number): void;
    getHashOfMapAreaAtCoords(x: number, y: number, z: number): string;
    getHashOfMapAreaAtCoords(x: number, y: number, z: number): number;
    getZoneFromNameId(zoneName: string): number;
    setZoneEnabled(zoneId: number, toggle: boolean): void;
    getZoneOfName(x: number, y: number, z: number): string;
}

declare interface MpGame {
    readonly app: MpGameApp;
    readonly audio: MpGameAudio;
    readonly brain: MpGameBrain;
    readonly cam: MpGameCam;
    readonly controls: MpGameControls;
    readonly cutscene: MpGameCutscene;
    readonly datafile: MpGameDatafile;
    readonly decisionevent: MpGameDecisionevent;
    readonly decorator: MpGameDecorator;
    readonly dlc1: MpGameDlc1;
    readonly dlc2: MpGameDlc2;
    readonly entity: MpGameEntity;
    readonly fire: MpGameFire;
    readonly gameplay: MpGameGameplay;
    readonly graphics: MpGameGraphics;
    readonly interior: MpGameInterior;
    readonly itemset: MpGameItemset;
    readonly mobile: MpGameMobile;
    readonly object: MpGameObject;
    readonly pathfind: MpGamePathfind;
    readonly ped: MpGamePed;
    readonly player: MpGamePlayer;
    readonly rope: MpGameRope;
    readonly script: MpGameScript;
    readonly stats: MpGameStats;
    readonly streaming: MpGameStreaming;
    readonly system: MpGameSystem;
    readonly time: MpGameTime;
    readonly ui: MpGameUi;
    readonly unk: MpGameUnk;
    readonly recorder: MpGameRecorder;
    readonly vehicle: MpGameVehicle;
    readonly water: MpGameWater;
    readonly weapon: MpGameWeapon;
    readonly worldprobe: MpGameWorldprobe;
    readonly zone: MpGameZone;
}

declare interface MpGuiChat {
    safe: boolean;
    colors: boolean;

    push(...value: any[]): any; // TODO: Missing documentation;
    activate(value: boolean): any;
    show(...value: any[]): any; // TODO: Missing documentation;
}

declare interface MpGuiCursor {
    visible: boolean;

    update(...args: any[]): any;
}

declare interface MpGui {
    readonly cursor: MpGuiCursor;
    readonly chat: MpGuiChat;
}

declare interface MpMarker extends MpEntity {

}

declare interface MpMarkerPool extends MpPool<MpMarker> {

}

declare interface MpNametags {
    enabled: boolean;

    set(...value: any[]); // TODO: Missing documentation;
    update(...value: any[]): any; // TODO: Missing documentation;
}

declare interface MpObject extends MpEntity {
    slide(toX: number, toY: number, toZ: number, speedX: number, speedY: number, speedZ: number, collision: boolean): boolean;
    setActivatePhysicsAsSoonAsItIsUnfrozen(toggle: boolean): void;
    placeOnGroundProperly(): boolean;
    setTargettable(targettable: boolean): void;
    hasBeenBroken(): boolean;
    isVisible(): boolean;
    markForDeletion(): void;
    setPhysicsParams(weight: number, p1: number, p2: number, p3: number, p4: number, gravity: number, p6: number, p7: number, p8: number, p9: number, buoyancy: number): void;
}

declare interface MpObjectPool extends MpPool<MpObject> {

}

declare interface MpPed extends MpEntity {

}

declare interface MpPickup extends MpEntity {

}

declare interface MpPickupPool extends MpPool<MpPickup> {

}

declare interface MpPlayer extends MpEntity {
    readonly isClimbing: boolean;
    readonly action: string;
    name: string;
    heading: number;
    health: number;
    armour: number;
    readonly isJumping: boolean;
    readonly isInCover: boolean;
    readonly vehicle: boolean;
    readonly isEnteringVehicle: boolean;
    readonly isLeavingVehicle: boolean;
    readonly seat: boolean;
    readonly weapon: object; //TODO: Find type
    readonly isAiming: boolean;
    readonly aimTarget: boolean;
    readonly ping: number;
    readonly ip: string;
    eyeColour: number;
    hairColour: number;
    hairHighlightColour: number;

    setModel(model: string | number): void;
    setTeam(team: number): void;
    changePed(ped: MpPed | object, b2: boolean, b3: boolean): void;
    getWantedCentrePosition(): MpVector3;
    getGroup(): number;
    clearParachuteVariationOverride(): void;
    setForcedAim(toggle: boolean): void;
    clearParachutePackModelOverride(): void;
    setResetFlagPreferRearSeats(flags: number): void;
    getSprintTimeRemaining(): number;
    resetInputGait(): void;
    setMayNotEnterAnyVehicle(): void;
    hasDamagedAtLeastOnePed(): boolean;
    isWantedLevelGreater(wantedLevel: number): boolean;
    setInvincible(toggle: boolean): void;
    setLockonRangeOverride(range: number): void;
    resetArrestState(): void;
    setWeaponDefenseModifier(modifier: number): void;
    isFreeAiming(): boolean;
    getCurrentStealthNoise(): number;
    setPoliceIgnore(toggle: boolean): void;
    setWantedLevelNoDrop(wantedLevel: number, p2: boolean): void;
    getTeam(): number;
    isBeingArrested(atArresting: boolean): boolean;
    setWantedLevel(wantedLevel, disableNoMission): void;
    giveRagdollControl(toggle: boolean): void;
    getSprintStaminaRemaining(): number;
    isDead(): boolean;
    getPed(): MpPed | object;
    isControlOn(): boolean;
    setMeleeWeaponDamageModifier(modifier: number): void;
    clearHasDamagedAtLeastOneNonAnimalPed(): void;
    setVehicleDefenseModifier(modifier: number): void;
    setStealthPerceptionModifier(value: number): void;
    isRidingTrain(): boolean;
    getPedScriptIndex(): MpPed | object;
    setWantedCentrePosition(x: number, y: number, z: number): void;
    setLockon(toggle: boolean): void;
    setHealthRechargeMultiplier(regenRate: number): void;
    getHasReserveParachute(): boolean;
    isPlaying(): boolean;
    getName(): string;
    setCanDoDriveBy(toggle: boolean): void;
    getParachutePackTintIndex(tintIndex: number): number;
    setClothPinFrames(toggle: boolean): void;
    getParachuteTintIndex(tintIndex: number): number;
    setForcedZoom(toggle: boolean): void;
    setForceSkipAimIntro(toggle: boolean): void;
    setMaxArmour(value: number): void;
    isTargettingAnything(): boolean;
    setHasReserveParachute(): void;
    setMayOnlyEnterThisVehicle(vehicle: MpVehicle | object): void;
    setParachuteSmokeTrailColor(r: number, g: number, b: number): void;
    clearParachuteModelOverride(): void;
    isScriptControlOn(): boolean;
    setControl(toggle: boolean, possiblyFlags: number): void;
    setEveryoneIgnore(toggle: boolean): void;
    isReadyForCutscene(): boolean;
    getMaxArmour(): number;
    setParachutePackTintIndex(tintIndex: number): void;
    setParachuteModelOverride(model: number | string): void;
    setSprint(toggle: boolean): void;
    getUnderwaterTimeRemaining(): number;
    setParachuteTintIndex(tintIndex: number): void;
    setVehicleDamageModifier(damageAmount: number): void;
    resetStamina(): void;
    setReserveParachuteTintIndex(tintIndex: number): void;
    setSneakingNoiseMultiplier(multiplier: number): void;
    clearWantedLevel(): void;
    getInvincible(): boolean;
    setSimulateAiming(toggle: boolean): void;
    setWeaponDamageModifier(damageAmount: number): void;
    setCanUseCover(toggle: boolean): object;
    hasLeftTheWorld(): boolean;
    getReserveParachuteTintIndex(tintIndex: number): number;
    setCanBeHassledByGangs(toggle: boolean): void;
    hasBeenSpottedInStolenVehicle(): boolean;
    setParachuteVariationOverride(p1: number, p2: object, p3: object, p4: boolean): void;
    setNoiseMultiplier(multiplier: number): void;
    setParachutePackModelOverride(model: number | string): void;
    isFreeForAmbientTask(): boolean;
    setWantedLevelNow(p1: boolean): void;
    hasTeleportFinished(): boolean;
    getWantedLevel(): number;
    hasDamagedAtLeastOneNonAnimalPed(): boolean;
    getRgbColour(r: number, g: number, b: number): {
        readonly r: number;
        readonly g: number;
        readonly b: number;
    };
    getParachuteSmokeTrailColor(r: number, g: number, b: number): {
        readonly r: number;
        readonly g: number;
        readonly b: number;
    };
    clearHasDamagedAtLeastOnePed(): void;
    canPedHear(ped: MpPed | object): boolean;
    removeHelmet(p2: boolean): object;
    setCanLeaveParachuteSmokeTrail(enabled: boolean): void;
    isPressingHorn(): boolean;
    isUsingActionMode(): boolean;
    setMinMoveBlendRatio(value: number): void;
    setRagdollForceFall(): object;
    isOnFoot(): boolean;
    setAsEnemy(toggle: boolean): void;
    setDucking(toggle: boolean): void;
    getTextureVariation(componentId: number): number;
    setTargetLossResponse(responseType: number): void;
    setMoveRateOverride(value: number): void;
    clearProp(propId: number): void;
    setMotionBlur(toggle: boolean): void;
    isInAnyPoliceVehicle(): boolean;
    setGroupMemberPassengerIndex(index: number): void;
    clearDecorations(): void;
    setCanPlayAmbientBaseAnims(toggle: boolean): void;
    setToInformRespectedFriends(radius: number, maxFriends: number): void;
    isVaulting(): boolean;
    wasSkeletonUpdated(): boolean;
    wasSkeletonUpdated(): boolean;
    canRagdoll(): boolean;
    setBlendFromParents(p1: object, p2: object, p3: number, p4: number): void;
    setSteersAroundObjects(toggle: boolean): void;
    forceToOpenParachute(): void;
    getCauseOfDeath(): number | string;
    getBoneCoords(boneId: number, offsetX: number, offsetY: number, offsetZ: number): MpVector3;
    getMeleeTargetFor(): MpPed | object;
    setConfigFlag(flagId: number, value: boolean): void;
    isUsingScenario(scenario: string): boolean;
    isHangingOnToVehicle(): boolean;
    setCanSmashGlass(p1: boolean, p2: boolean): void;
    getTimeOfDeath(): number;
    resetStrafeClipset(): void;
    getRagdollBoneIndex(bone: number): number;
    resetInVehicleContext(): void;
    getNearbyPeds(sizeAndPeds: number, ignore: number): number;
    isReloading(): boolean;
    setWeaponMovementClipset(clipSet: string): void;
    setComponentVariation(componentId: number, drawableId: number, textureId: number, paletteId: number): void;
    setRagdollFlag(flag: number): void;
    setHelmetPropIndex(propIndex: number): void;
    getHeadBlendData(headBlendData: {
        shapeFirst: number;
        shapeSecond: number;
        shapeThird: number;
        skinFirst: number;
        skinSecond: number;
        skinThird: number;
        shapeMix: number;
        skinMix: number;
        thirdMix: number;
    }): void;
    getNumberOfDrawableVariations(componentId: number): void;
    setSweat(sweat: number): void;
    isInAnyHeli(): boolean;
    setStrafeClipset(clipSet: string): void;
    setDiesInVehicle(toggle: boolean): void;
    setAsGroupLeader(groupId: number): void;
    isRunningMobilePhoneTask():boolean;
    isPropValid(componentId: number, drawableId: number, TextureId: number): boolean;
    getFloodInvincibility(p1: boolean): void;
    explodeHead(weaponHash: number | string): void;
    setVisualFieldMinAngle(value: number): void;
    isInAnyBoat(): boolean;
    setCanTeleportToGroupLeader(groupHandle: number, toggle: boolean): void;
    registerTarget(target: MpPed | object): void;
    applyBloodByZone(p1: object, p2: number, p3: number, p4: object): void;
    isDeadOrDying(p1: boolean): boolean;
    setToLoadCover(toggle: boolean): void;
    setHearingRange(value: number): void;
    isShooting(): boolean;
    setCapsule(value: number): void;
    getAccuracy(): number;
    applyDamageDecal(p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: boolean, p9: string): void;
    isAimingFromCover(): boolean;
    resetVisibleDamage(): object;
    setVisualFieldCenterAngle(angle: number): void;
    setAllowVehiclesOverride(toggle: boolean): void;
    getDefensiveAreaPosition(p1: boolean): MpVector3;
    setCombatRange(p1: number): void;
    setNeverLeavesGroup(toggle: boolean): void;
    getBoneIndex(boneId: number): number;
    getMoney(): number;
    setDefensiveAreaDirection(p1: number, p2: number, p3: number, p4: boolean): void;
    isEvasiveDiving(evadingEntity: MpEntity | object): boolean;
    getRelationshipGroupDefaultHash(): number | string;
    setCanBeTargetedWithoutLos(toggle: boolean): void;
    setMaxMoveBlendRatio(value: number): void;
    isJumpingOutOfVehicle(): boolean;
    setMaxTimeInWater(value: number): void;
    registerheadshot(): object;
    setWetnessHeight(height: number): object;
    isTryingToEnterALockedVehicle(): boolean;
    knockOffVehicle(): void;
    setDefaultComponentVariation(): void;
    isOnMount(): boolean;
    applyDamagePack(damagePack: string, damage: number, mult: number): void;
    setSteersAroundPeds(toggle: boolean): void;
    getMaxHealth(): number;
    isRagdoll(): boolean;
    isInCombat(target: MpPed | object): boolean;
    setHeadOverlay(overlayID: number, index: number, opacity: number): void;
    setHeadOverlayColor(overlayID: number, colorType: number, colorID: number, secondColorID: number): void;
    isJacking(): boolean;
    clearDriveByClipsetOverride(): void;
    isTracked(): boolean;
    setHairColor(colorID: number, highlightColorID: number): void;
    setCombatMovement(combatMovement: number): void;
    isInMeleeCombat(): boolean;
    setDefensiveAreaAttachedToPed(attachPed: MpPed | object, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: boolean, p10: boolean): void;
    setBoundsOrientation(p1: number, p2: number, p3: number, p4: number, p5: number): void;
    isBeingStunned(p1: number): boolean;
    setEyeColor(index: number): void;
    canKnockOffVehicle(): boolean;
    clearDamageDecalByZone(p1: number, p2: string): void;
    getCombatFloat(ped: MpPed, p1: number): number
    setInVehicleContext(context: number | string): void;
    isStopped(): boolean;
    getJackTarget(): MpPed | object;
    giveHelmet(cannotRemove: boolean, helmetFlag: number, textureIndex: number): void;
    isDiving(): boolean;
    setHelmet(canWearHelmet: boolean): void;
    setFacialDecoration(collection: number | string, overlay: number | string): void;
    setDiesInWater(toggle: boolean): void;
    clearBloodDamageByZone(p1: number): void;
    isUsingAnyScenario(): boolean;
    isInGroup(): boolean;
    setScriptedAnimSeatOffset(p1: number): void;
    isHurt(): boolean;
    setDiesWhenInjured(toggle: boolean): object;
    isHeadtrackingPed(ped2: MpPed | object): boolean;
    setDecoration(collection: number | string, overlay: number | string): void;
    getNumberOfPropDrawableVariations(propId: number): number;
    isInAnyPlane(): boolean;
    getVehicleIsUsing(): MpVehicle | object;
    setShootRate(shootRate: number): void;
    hideBloodDamageByZone(p1: object, p2: boolean): void;
    setCanPlayAmbientAnims(toggle: boolean): void;
    setCanBeTargetedWhenInjured(toggle: boolean): void;
    setCanBeTargetted(toggle: boolean): void;
    hasHeadBlendFinished(): boolean;
    setCanBeTargettedByPlayer(player: MpPlayer, toggle: boolean): void;
    isOnVehicle(): boolean;
    getDrawableVariation(componentId: number): number;
    applyDamageTo(damageAmount: number, p2: boolean): void;
    getPlayerIsFollowing(): MpPlayer;
    setCanEvasiveDive(toggle: boolean): void;
    setMaxTimeUnderwater(value: number): void;
    setCanArmIk(toggle: boolean): void;
    isMale(): boolean;
    isInAnyTaxi(): boolean;
    isScriptedScenarioUsingConditionalAnim(animDict: string, anim: string): boolean;
    getSeatIsTryingToEnter(): number;
    isInAnyTrain(): boolean;
    knockOffProp(p1: boolean, p2: boolean, p3: boolean, p4: boolean): void;
    setVisualFieldMaxAngle(value: number): void;
    setFleeAttributes(attributes: number, p2: boolean): void;
    setFaceFeature(index: number, scale: number): void;
    resurrect(): void;
    getDecorationsState(): object;
    updateHeadBlendData(shapeMix: number, skinMix: number, thirdMix: number): void;
    clearFacialIdleAnimOverride(): void;
    setCanLegIk(toggle: boolean): void;
    removeDefensiveArea(toggle: boolean): void;
    setVisualFieldMaxElevationAngle(angle: number): void;
    isInModel(modelHash: number | string): boolean;
    getParachuteState(): number;
    setVisualFieldMinElevationAngle(angle: number): void;
    setCanBeKnockedOffVehicle(state: number): void;
    setAccuracy(accuracy: number): object;
    getRelationshipGroupHash(): number | string;
    isInParachuteFreeFall(): boolean;
    isShootingInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p7: boolean, p8: boolean): boolean;
    getConfigFlag(flagId: number, p2: boolean): boolean;
    wasKilledByTakedown(): boolean;
    setGeneratesDeadBodyEvents(toggle: boolean): void;
    isHeadtracking(entity: MpEntity | object): boolean;
    getVehicleIsTryingToEnter(): MpVehicle | object;
    applyBloodDamageByZone(p1: object, p2: number, p3: number, p4: object): void;
    isSittingInAnyVehicle(): boolean;
    applyBlood(boneIndex: number, xRot: number, yRot: number, zRot: number, woundType: string): void;
    setPreferredCoverSet(itemSet: object): void;
    isInCoverFacingLeft(): boolean;
    isInjured(): boolean;
    isBeingStealthKilled(): boolean;
    setCoordsNoGang(posX: number, posY: number, posZ: number): void;
    setStealthMovement(p1: boolean, action: string): void;
    getPropIndex(componentId: number): number;
    getParachuteLandingType(): number;
    reviveInjured(): void;
    clearLastDamageBone(): void;
    getNumberOfTextureVariations(componentId: number, drawableId: number): number;
    clearBloodDamage(): void;
    setAlternateMovementAnim(stance: number, animDictionary: string, animationName: string, p4: number, p5: boolean)
    isInFlyingVehicle(): boolean;
    isTrackedVisible(): boolean;
    registerHatedTargetsAround(radius: number): void;
    setPropIndex(componentId: number, drawableId: number, TextureId: number, attach: boolean): void;
    getSourceOfDeath(): MpEntity | object;
    setHeadBlendData(shapeFirstID: number, shapeSecondID: number, shapeThirdID: number, skinFirstID: number, skinSecondID: number, skinThirdID: number, shapeMix: number, skinMix: number, thirdMix: number, isParent: boolean): void;
    isOnAnyBike(): boolean;
    getArmour(): number;
    setPlaysHeadOnHornAnimWhenDiesInVehicle(toggle: boolean): void;
    setShootsAtCoord(x: number, y: number, z: number, toggle: boolean): void;
    unregisterheadshot(): void;
    setKeepTask(toggle: boolean): void;
    setEnableWeaponBlocking(toggle: boolean): object;
    resetWeaponMovementClipset(): void;
    setNameDebug(name: string): void;
    isInAnyVehicle(atGetIn: boolean): boolean;
    isBeingJacked(): boolean;
    getVehicleIsIn(getLastVehicle: boolean): MpVehicle | object;
    setFiringPattern(patternHash: number | string): void;
    setCoordsKeepVehicle(posX: number, posY: number, posZ: number): void;
    getsJacker(): MpPed | object;
    isGroupMember(groupId: number): boolean;
    getEnveffScale(): number;
    clearWetness(): object;
    setVisualFieldPeripheralRange(range: number): void;
    setSphereDefensiveArea(x: number, y: number, z: number, radius: number, p5: boolean, p6: boolean): void;
    isSwimming(): boolean;
    setMoveAnimsBlendOut(): void;
    setAsGroupMember(groupId: number): void;
    isGoingIntoCover(): boolean;
    setCombatAttributes(attributeIndex: number, enabled: boolean): void;
    setBlockingOfNonTemporaryEvents(toggle: boolean): void;
    resetRagdollTimer(): void;
    setGravity(toggle: boolean): void;
    isInVehicle(vehicle: MpVehicle | object, atGetIn: boolean): void;
    setCowerHash(p1: string): void;
    getHeadOverlayValue(overlayID: number): number;
    getNumberOfPropTextureVariations(propId: number, drawableId: number): number;
    setDriverAggressiveness(aggressiveness: number): void;
    isSittingInVehicle(vehicle: MpVehicle | object): boolean;
    setMoney(amount: number): void;
    setDesiredHeading(heading: number): void;
    resetMovementClipset(p1: number): void;
    setPinnedDown(pinned: boolean, i: number): object;
    setRelationshipGroupDefaultHash(hash: number | string): void;
    setToRagdoll(time1: number, time2: number, ragdollType: number, p4: boolean, p5: boolean, p6: boolean): boolean;
    setMovementClipset(clipSet: string, p2: number): void;
    getResetFlag(flagId: number): boolean;
    setCanRagdoll(toggle: boolean): void;
    giveNmMessage(): void;
    setDriverAbility(ability: number): void;
    isDoingDriveby(): boolean;
    setCanAttackFriendly(toggle: boolean, p2: boolean): void;
    setWetnessEnabledThisFrame(): void;
    isHuman(): boolean;
    setCanPlayGestureAnims(toggle: boolean): void;
    setAsCop(toggle: boolean): void;
    isGettingIntoAVehicle(): boolean;
    resetLastVehicle(): void;
    isFleeing(): boolean;
    setGetOutUpsideDownVehicle(toggle: boolean): void;
    setCanBeTargettedByTeam(team: number, toggle: boolean): void;
    setEnveffScale(value: number): void;
    isSwimmingUnderWater(): boolean;
    setHelmetFlag(helmetFlag: number): void;
    setCanHeadIk(toggle: boolean): void;
    stopWeaponFiringWhenDropped(): void;
    setCanBeDraggedOut(toggle: boolean): void;
    setResetFlag(flagId: number, doReset: boolean): void;
    setIkTarget(p1: number, targetPed: MpPed | object, boneLookAt: number, x: number, y: number, z: number, p7: object, duration: number, duration1: number): void;
    setLegIkMode(mode: number): void;
    setRandomProps(): void;
    setCanPeekInCover(toggle: boolean): void;
    setEnableBoundAnkles(toggle: boolean): void;
    isPlantingBomb(): boolean;
    setCombatAbility(p1: number): void;
    setCanBeShotInVehicle(toggle: boolean): void;
    setAngledDefensiveArea(p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: boolean, p9: boolean): void;
    setRelationshipGroupHash(hash: number | string): void;
    setRandomComponentVariation(p1: boolean): void;
    isModel(modelHash: number | string): boolean;
    setCanCowerInCover(toggle: boolean): void;
    setPrimaryLookat(lookAt: MpPed | object): void;
    getDeadPickupCoords(p1: number, p2: number): MpVector3;
    clearAllProps(): void;
    setArmour(amount: number): void;
    getNearbyVehicles(sizeAndVehs: number): number;
    isDucking(): boolean;
    setEnableEnveffScale(toggle: boolean): void;
    isProne(): boolean;
    isFacingPed(otherPed: MpPed | object, angle: number): boolean;
    setDiesInSinkingVehicle(toggle: boolean): void;
    getLastDamageBone(outBone: number): number;
    setUsingActionMode(p1: boolean, p2: object, action: string): void;
    isFatallyInjured(): boolean;
    setResetRagdollFlag(flag: number): void;
    clearAlternateMovementAnim(stance: number, p2: number): void;
    setAllowedToDuck(toggle: boolean): void;
    setAlertness(value:number): void;
    setLodMultiplier(multiplier: number): void;
    setGestureGroup(p1: object): void;
    getCombatMovement(): number;
    setEnableHandcuffs(toggle: boolean): void;
    setCanRagdollFromPlayerImpact(toggle: boolean): void;
    isConversationDead(): boolean;
    getExtractedDisplacement(worldSpace: boolean): MpVector3;
    getPropTextureIndex(componentId: number): number;
    setModelIsSuppressed(toggle: boolean): void;
    playFacialAnim(animName: string, animDict: string): void;
    clearFacialDecorations(): void;
    isRunningRagdollTask(): boolean;
    getPaletteVariation(componentId: number): number;
    getMount(): MpPed | object;
    isComponentVariationValid(componentId: number, drawableId: number, textureId: number): void;
    cloneToTarget(ped2: MpPed | object): void;
    canInCombatSeeTarget(target: MpPed | object): boolean;
    setSteersAroundVehicles(toggle: boolean): void;
    getRelationshipBetweens(ped2: MpPed | object): void;
    setSuffersCriticalHits(toggle: boolean): void;
    setCanUseAutoConversationLookat(toggle: boolean): void;
    isOnSpecificVehicle(vehicle: MpVehicle | object): boolean;
    setDriveByClipsetOverride(clipset: string): void;
    removeFromGroup(): void;
    setCanSwitchWeapon(toggle: boolean): void;
    setStayInVehicleWhenJacked(toggle: boolean): void;
    setDiesInstantlyInWater(toggle: boolean): void;
    applyBloodSpecific(p1: object, p2: number, p3: number, p4: number, p5: number, p6: object, p7: number, p8: object): void;
    clone(heading: number, networkHandle: boolean, pedHandle: boolean): MpPed | object;
    setRagdollOnCollision(toggle: boolean): void;
    setIdRange(value: number): void;
    setHelmetTextureIndex(textureIndex: number): void;
    getGroupIndex(): number;
    forceMotionState(motionStateHash: number | string, p2: boolean, p3: boolean, p4: boolean): boolean;
    setSeeingRange(value: number): void;
    setCanTorsoIk(toggle: boolean): void;
    isWearingHelmet(): boolean;
    setMaxHealth(value: number): void;
    getAlertness(): number;
    setIntoVehicle(vehicle: MpVehicle | object, seatIndex: number): void;
    setCanPlayVisemeAnims(p1: boolean, p2: boolean): void;
    setExclusivePhoneRelationships(): MpVehicle | object;
    wasKilledByStealth(): boolean;
    setEnableScuba(toggle: boolean): void;
    setDefensiveSphereAttachedToPed(p1: object, p2: number, p3: number, p4: number, p5: number, p6: boolean): void;
    getCombatRange(): object;
    setMinGroundTimeForStungun(ms: number): void;
    isFalling(): boolean;
    isInAnySub(): boolean;
    isPerformingStealthKill(): boolean;
    removePreferredCoverSet(): void;
    getType(): number;
    setCombatFloat(combatType: number, p2: number): void;
    setFacialIdleAnimOverride(animName: string, animDict: string): void;
    getSequenceProgress(): number;
    setParachuteTaskThrust(thrust: number): void;
    taskRappelFromHeli(p1: number): void;
    taskJump(unused: boolean): void;
    taskVehiclePark(vehicle: MpVehicle | object, x: number, y: number, z: number, heading: number, mode: number, radius: number, keepEngineOn: boolean): void;
    taskClearLookAt(): void;
    taskVehicleEscort(vehicle: MpVehicle | object, targetVehicle: MpVehicle | object, mode: number, speed: number, drivingStyle: number, minDistance: number, p7: number, noRoadsDistance: number): void;
    taskVehicleShootAt(target: MpPed | object, p2: number): void;
    taskGoToCoordWhileAimingAtCoord(x: number, y: number, z: number, aimAtX: number, aimAtY: number, aimAtZ: number, moveSpeed: number, p8: boolean, p9: number, p10: number, p11: boolean, flags: object, p13: boolean, firingPattern: number | string): void;
    taskScriptedAnimation(p1: object, p2: object, p3: object, p4: number, p5: number): void;
    taskStartScenarioInPlace(scenarioName: string, unkDelay: number, playEnterAnim: boolean): void;
    taskVehicleDriveToCoordLongrange(vehicle: MpVehicle | object, x: number, y: number, z: number, speed: number, driveMode: number, stopRange: number): void;
    taskBoatMission(boat: MpVehicle | object, p2: object, p3: object, x: number, y: number, z: number, p7: object, maxSpeed: number, p9: object, p10: number, p11: object): void;
    taskFollowNavMeshToCoord(x: number, y: number, z: number, speed: number, timeout: number, stoppingRange: number, persistFollowing: boolean, unk: number): void;
    clearSecondaryTask(): void;
    taskFollowNavMeshToCoordAdvanced(x: number, y: number, z: number, speed: number, timeout: number, unkFloat: number, unkInt: number, unkX: number, unkY: number, unkZ: number, unk2: number): void;
    taskVehicleGotoNavmesh(vehicle: MpVehicle | object, x: number, y: number, z: number, speed: number, behaviorFlag: number, stoppingRange: number): void;
    taskPutDirectlyIntoMelee(meleeTarget: MpPed | object, p2: number, p3: number, p4: number, p5: boolean): void;
    taskGoToCoordAnyMeansExtraParams(x: number, y: number, z: number, speed: number, p5: object, p6: boolean, walkingStyle: number, p8: number, p9: object, p10: object, p11: object): void;
    taskTurnToFaceCoord(x: number, y: number, z: number, duration: number): void;
    taskVehicleHeliProtect(vehicle: MpVehicle | object, entityToFollow: MpEntity | object, targetSpeed: number, p4: number, radius: number, altitude: number, p7: number): void;
    setDesiredMoveBlendRatio(p1: number): void;
    getPhoneGestureAnimTotalTime(): number;
    taskSweepAim(anim: string, p2: string, p3: string, p4: string, p5: number, vehicle: MpVehicle | object, p7: number, p8: number): void;
    taskSmartFlee(fleeTarget: MpPed | object, distance: number, fleeTime: object, p4: boolean, p5: boolean): void;
    taskPlaneMission(plane: MpVehicle | object, targetVehicle: MpVehicle | object, targetPed: MpPed | object, destinationX: number, destinationY: number, destinationZ: number, p7: number, physicsSpeed: number, p9: number, p10: number, maxAltitude: number, minAltitude: number): void;
    isMoveBlendRatioSprinting(): boolean;
    hasUseScenarioTask(): boolean;
    isGettingUp(): boolean;
    taskPlaneChase(entityToFollow: MpEntity | object, x: number, y: number, z: number): void;
    taskMoveNetwork(task: string, multiplier: number, p3: boolean, animDict: string, flags: number): void;
    taskDriveBy(targetPed: MpPed | object, p2: object, targetX: number, targetY: number, targetZ: number, p6: number, p7: object, p8: boolean, firingPattern: number | string): void;
    taskFollowToOffsetOf(entity: MpEntity | object, offsetX: number, offsetY: number, offsetZ: number, movementSpeed: number, timeout: number, stoppingRange: number, persistFollowing: boolean): void;
    taskVehicleFollowWaypointRecording(vehicle: MpVehicle | object, WPRecording: string, p3: number, p4: number, p5: number, p6: number, p7: number, p8: boolean, p9: number): void;
    isMoveBlendRatioStill(): boolean;
    setPathPreferToAvoidWater(avoidWater: boolean): void;
    taskSeekCoverToCoords(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p7: object, p8: boolean): void;
    taskVehicleChase(targetEnt: MpEntity | object): void;
    isRunningArrestTask(): boolean;
    taskCower(duration: number): void;
    taskStopPhoneGestureAnimation(): void;
    taskPutDirectlyIntoCover(x: number, y: number, z: number, timeout: object, p5: boolean, p6: number, p7: boolean, p8: boolean, p9:object, p10: boolean): void;
    setPathAvoidFire(avoidFire: boolean): void;
    taskShockingEventReact(eventHandle: number): void;
    taskShootAtCoord(x: number, y: number, z: number, duration: number, firingPattern: number | string): void;
    getPhoneGestureAnimCurrentTime(): number;
    taskVehicleDriveWander(vehicle: MpVehicle | object, speed: number, drivingStyle: number): void;
    taskGuardCurrentPosition(p1: number, p2: number, p3: number): void;
    taskCombatHatedTargetsInArea(x: number, y: number, z: number, radius: number, p5: object): void;
    taskForceMotionState(state: number | string, p2: boolean): void;
    taskLeaveAnyVehicle(p1: number, p2: number): void;
    isSprinting(): boolean;
    taskUseNearestScenarioToCoordWarp(x: number, y: number, z: number, radius: number, p5: object): void;
    taskFollowPointRoute(speed: number, unknown: number): void;
    taskSlideToCoordHdgRate(x: number, y: number, z: number, heading: number, p5: number, p6: number): void;
    taskPerformSequence(taskSequence: MpObject | object): object;
    taskTurnToFace(entity: MpEntity | object, duration: number): void;
    taskGoToCoordAnyMeans(x: number, y: number, z: number, speed: number, p5: object, p6: boolean, walkingStyle: number, p8: number): void;
    setDriveTaskCruiseSpeed(cruiseSpeed: number): void;
    addVehicleSubtaskAttackCoord(x: number, y: number, z: number): void;
    taskUseMobilePhoneTimed(duration: number): void;
    taskSkyDive(): void;
    taskReloadWeapon(doReload: boolean): void;
    setTaskVehicleChaseIdealPursuitDistance(distance: number): void;
    taskAimGunAtCoord(x: number, y: number, z: number, time: number, p5: boolean, p6: boolean): void;
    uncuff(): void;
    taskLookAt(lookAt: MpEntity | object, duration: number, unknown1: number, unknown2: number): void;
    taskReactAndFlee(fleeTarget: MpPed | object): void;
    playAnimOnRunningScenario(animDict: string, animName: string): void;
    isCuffed(): boolean;
    setPathCanUseLadders(Toggle: boolean): object;
    getScriptTaskStatus(taskHash: number | string): number;
    taskAimGunScripted(scriptTask: number | string, p2: boolean, p3: boolean): void;
    taskShuffleToNextVehicleSeat(vehicle: MpVehicle | object): void;
    taskCombatHatedTargetsAround(radius: number, p2: number): void;
    taskPlayAnimAdvanced(animDict: string, animName: string, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, speed: number, speedMultiplier: number, duration: number, flag: object, animTime: number, p14: object, p15: object): void;
    taskSeekCoverFrom(target: MpPed | object, duration: number, p3: boolean): void;
    getDesiredMoveBlendRatio(): number;
    addVehicleSubtaskAttack(ped2: MpPed | object): void;
    isDrivebyTaskUnderneathDrivingTask(): boolean;
    taskClimb(unused: boolean): void;
    taskChatTo(target: MpPed | object, p2: object, p3: number, p4: number, p5: number, p6: number, p7: number): void;
    setHighFallTask(p1: object, p2: object, p3: object): void;
    setPathCanUseClimbovers(Toggle: boolean): object;
    taskPlayPhoneGestureAnimation(p1: object, p2: object, p3: object, p4: number, p5: number, p6: boolean, p7: boolean): void;
    taskSetBlockingOfNonTemporaryEvents(toggle: boolean): void;
    taskStandStill(time: number): void;
    taskAchieveHeading(heading: number, timeout: number): void;
    taskVehicleMissionTarget(vehicle: MpVehicle | object, pedTarget: MpPed | object, mode: number, maxSpeed: number, drivingStyle: number, minDistance: number, p7: number, p8: boolean): void;
    taskSmartFleeCoord(x: number, y: number, z: number, distance: number, time: number, p6: boolean, p7: boolean): void;
    taskOpenVehicleDoor(vehicle: MpVehicle | object, timeOut: number, doorIndex: number, speed: number): void;
    taskPlantBomb(x: number, y: number, z: number, heading: number): void;
    updateTaskAimGunScriptedTarget(p1: MpPed | object, p2: number, p3: number, p4: number, p5: boolean): void;
    taskGoToWhileAimingAtEntity(entityToWalkTo: MpEntity | object, entityToAimAt: MpEntity | object, speed: number, shootatEntity: boolean, p5: number, p6: number, p7: boolean, p8: boolean, firingPattern: number | string): void;
    stopAnimTask(animDictionary: string, animationName: string, p3: number): void;
    taskWarpIntoVehicle(vehicle: MpVehicle | object, seat: number): void;
    taskAimGunAt(entity: MpEntity | object, duration: number, p3: boolean): void;
    taskGetOffBoat(boat: MpVehicle | object): void;
    taskSwapWeapon(p1: boolean): void;
    isMountedWeaponTaskUnderneathDrivingTask(): boolean;
    taskGoToCoordAndAimAtHatedEntitiesNearCoord(gotoX: number, gotoY: number, gotoZ: number, aimNearX: number, aimNearY: number, aimNearZ: number, speed: number, shoot: boolean, unknown1: number, unknown2: number, unkTrue: boolean, unknown3: number, heading: boolean, firingPattern: number | string): void;
    updateTaskHandsUpDuration(duration: number): void;
    taskGotoAiming(target: MpEntity | object, distanceToStopAt: number, StartAimingDist: number): void;
    isActiveInScenario(): boolean;
    taskStealthKill(target: MpPed | object, killType: number | string, p3: number, p4: boolean): object;
    clearTasksImmediately(): void;
    isStill(): boolean;
    taskHeliChase(entityToFollow: MpEntity | object, x: number, y: number, z: number): void;
    taskStandGuard(x: number, y: number, z: number, heading: number, scenarioName: string): void;
    getIsTaskActive(taskNumber: number): boolean;
    taskParachuteToTarget(x: number, y: number, z: number): void;
    taskClimbLadder(p1: number): void;
    isPlayingPhoneGestureAnim(): boolean;
    taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(x: number, y: number, z: number, speed: number, p5: object, p6: boolean, walkingStyle: number, p8: number, p9: object, p10: object, p11: object, p12: object): void;
    taskWanderStandard(p1: number, p2: number): void;
    taskUseMobilePhone(p1: number): void;
    taskPatrol(p1: string, p2: object, p3: boolean, p4: boolean): void;
    taskPlaneLand(plane: MpVehicle | object, runwayStartX: number, runwayStartY: number, runwayStartZ: number, runwayEndX: number, runwayEndY: number, runwayEndZ: number): void;
    taskEnterVehicle(vehicle: MpVehicle | object, timeout: number, seat: number, speed: number, p5: number, p6: object): void;
    setParachuteTaskTarget(x: number, y: number, z: number): void;
    clearDrivebyTaskUnderneathDrivingTask(): void;
    taskVehicleTempAction(vehicle: MpVehicle | object, action: number, time: number): void;
    isRunning(): boolean;
    getNavmeshRouteDistanceRemaining(p1: object, p2: object): object;
    taskGuardSphereDefensiveArea(p1: number, p2: number, p3: number, p4: number, p5: number, p6: object, p7: number, p8: number, p9: number, p10: number): void;
    setTaskVehicleChaseBehaviorFlag(flag: number, set: boolean): void;
    setMountedWeaponTarget(targetEntity: MpEntity | object, p2: object, x: number, y: number, z: number): void;
    taskWrithe(target: MpPed | object, time: number, p3: number): void;
    taskSlideToCoord(x: number, y: number, z: number, heading: number, p5: number): void;
    taskParachute(p1: boolean): void;
    taskLeaveVehicle(vehicle: MpVehicle | object, flags: number): void;
    isMoveBlendRatioRunning(): boolean;
    taskMoveNetworkAdvanced(p1: string, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: object, p9: number, p10: boolean, animDict: string, flags: number): void;
    taskGoStraightToCoord(x: number, y: number, z: number, speed: number, timeout: number, targetHeading: number, distanceToSlide: number): void;
    setDriveTaskDrivingStyle(drivingStyle: number): void;
    taskHeliMission(vehicle: MpVehicle | object, p2: object, pedToFollow: MpPed | object, posX: number, posY: number, posZ: number, mode: number, speed: number, radius: number, angle: number, p11: number, height: number, p13: number, p14: number): void;
    controlMountedWeapon(): boolean;
    isWalking(): boolean;
    isInWrithe(): boolean;
    taskWanderInArea(x: number, y: number, z: number, radius: number, minimalLength: number, timeBetweenWalks: number): void;
    clearTasks(): void;
    taskVehicleDriveToCoord(vehicle: MpVehicle | object, x: number, y: number, z: number, speed: number, p6: object, vehicleModel: number | string, drivingMode: number, stopRange: number, p10: number): void;
    setPathCanDropFromHeight(Toggle: boolean): void;
    taskGotoOffset(p1: object, p2: object, x: number, y: number, z: number, duration: number): void;
    taskVehicleAimAt(target: MpPed | object): void;
    isStrafing(): boolean;
    updateTaskSweepAim(entity: MpEntity | object): void;
    taskStayInCover(): void;
    taskPause(ms: number): void;
    taskPlayAnim(animDictionary: string, animationName: string, speed: number, speedMultiplier: number, duration: number, flag: number, playbackRate: number, lockX: boolean, lockY: boolean, lockZ: boolean): void;
    taskSetDecisionMaker(p1: number | string): void;
    stopAnimPlayback(p1: object, p2: boolean): void;
    taskSynchronizedScene(scene: number, animDictionary: string, animationName: string, speed: number, speedMultiplier: number, duration: number, flag: number, playbackRate: number, p9: object): void;
    taskVehicleMissionCoorsTarget(vehicle: MpVehicle | object, x: number, y: number, z: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: boolean): void;
    isMoveBlendRatioWalking(): boolean;
    taskCombat(targetPed: MpPed | object, p2: number, p3: number): void;
    taskHandsUp(duration: number, facingPed: MpPed | object, p3: number, p4: boolean): void;
    setPathsWidthPlant(mayEnterWater: boolean): void;
    taskArrest(target: MpPed | object): void;
    taskStartScenarioAtPosition(scenarioName: string, x: number, y: number, z: number, heading: number, p6: object, p7: boolean, p8: boolean): void;
    taskVehicleFollow(vehicle: MpVehicle | object, targetEntity: MpEntity | object, drivingStyle: number, speed: number, minDistance: number): void;
}

declare interface MpPlayerPool extends MpPool<MpPlayer> {
    readonly local: MpPlayer;
}

declare interface MpPool<TEntity> {
    readonly length: number;
    readonly size: number;

    apply(func: (...args: any[]) => void, ...args: any[]): void;
    at(index: number): TEntity;
    exists(entity: TEntity): boolean;
    forEach(func: (entity: TEntity, index?: number) => void): void;
    forEachInRange(position: MpVector3, range: number, func: (entity: TEntity, index?: number) => void): void;
    forEachInRange(position: MpVector3, range: number, dimension: number, func: (entity: TEntity, index?: number) => void): void;
    forEachInDimension(dimension: number, func: (entity: TEntity, index?: number) => void): void;
    toArray(): TEntity[];
}

declare interface MpQuaternion {
    x: number;
    y: number;
    z: number;
    w: number;

    'new'(x: number, y: number, z: number, w: number): MpQuaternion;
}

declare interface MpRaycasting {
    testPointToPoint(pos1: MpVector3, pos2: MpVector3, ignoreEntity?: MpEntity, flags?: any[]);
    testCapsule(pos1: MpVector3, pos2: MpVector3, radius: any, ignoreEntity?: MpEntity, flags?: any[]);
}

declare interface MpVector3 {
    x: number;
    y: number;
    z: number;

    'new'(x: number, y: number, z: number): MpVector3;
}

declare interface Vector3 {
    new( x: number, y: number, z: number ): MpVector3;
}

declare interface MpVehicle extends MpEntity {
    gear: number;
    steeringAngle: number;
    rpm: number;

    removeHighDetailModel(): void;
    setCreatesMoneyPickupsWhenExploded(toggle: boolean): void;
    steerUnlockBias(toggle: boolean): void;
    getTrainCarriage(cariage: number): MpEntity | object;
    setRudderBroken(p0: boolean): void;
    detachFromCargobob(cargobob: MpVehicle | object): void;
    getWindowTint(): number;
    setFixed(): void;
    areAllWindowsIntact(): boolean;
    doesExtraExist(extraId: number): boolean;
    isInBurnout(): boolean;
    isAttachedToTowTruck(vehicle: MpVehicle | object): boolean;
    setSearchlight(toggle: boolean, canBeUsedByAI: boolean): void;
    setTrainCruiseSpeed(speed: number): void;
    isCargobobHookActive(): boolean;
    setFrictionOverride(friction: number): void;
    getVehicleTrailer(vehicle: MpVehicle): MpVehicle;
    getTrailer(vehicle: MpVehicle): MpVehicle;
    isHighDetail(): boolean;
    setModKit(modKit: number): void;
    setExtraColours(pearlescentColor: number, wheelColor: number): void;
    getPedUsingDoor(doorIndex: number): MpPed | object;
    resetWheels(toggle: boolean): void;
    setReduceGrip(toggle: boolean): void;
    isSeatFree(seatIndex: number): boolean;
    disablePlaneAileron(p0: boolean, p1: boolean): void;
    setEngineOn(value: boolean, instantly: boolean, otherwise: boolean): void;
    getNumberOfPassengers(): number;
    getDoorLockStatus(): number;
    doesHaveWeapon(): boolean;
    setHalt(distance: number, killEngine: boolean, unknown: boolean): void;
    getBoatAnchor(): boolean;
    getLayoutHash(): string | number;
    getClass(): number;
    isStoppedAtTrafficLights(): boolean;
    attachToTowTruck(vehicle: MpVehicle | object, rear: boolean, hookOffsetX: number, hookOffsetY: number, hookOffsetZ: number): void;
    setWheelsCanBreak(enabled: boolean): void;
    toggleMod(modType: number, toggle: boolean): void;
    setNeonLightEnabled(index: number, toggle: boolean): void;
    setHasBeenOwnedByPlayer(owned: boolean): void;
    getLivery(): number;
    isAnySeatEmpty(): boolean;
    setTimedExplosion(ped: MpPed | object, toggle: boolean): void;
    setDoorBreakable(doorIndex: number, isBreakable: boolean): void;
    setCanBeUsedByFleeingPeds(toggle: boolean): void;
    canShuffleSeat(p0: object): boolean;
    setRenderTrainAsDerailed(toggle: boolean): void;
    setIsConsideredByPlayer(toggle: boolean): void;
    setColourCombination(numCombos: number): void;
    getNumModKits(): number;
    setLights(state: number | boolean): void;
    closeBombBayDoors(): void;
    setCustomSecondaryColour(r: number, g: number, b: number): void;
    setCanBeTargetted(state: boolean): void;
    setDisablePetrolTankDamage(toggle: boolean): void;
    setPaintFade(fade: number): void;
    getNumberOfColours(): number;
    getExtraColours(pearlescentColor: number, wheelColor: number): {
        readonly pearlescentColor: number;
        readonly wheelColor: number;
    };
    attachToTrailer(trailer: MpVehicle, radius: number): void;
    setStrong(toggle: boolean): void;
    wasCounterActivated(p0: object): boolean;
    attachToCargobob(cargobob: MpVehicle | object, p1: number, x: number, y: number, z: number): void;
    isModel(model: string | number): boolean;
    setSteerBias(value: number): void;
    isAlarmActivated(): boolean;
    setModColor1(paintType: number, color: number, p2: number): void;
    releasePreloadMods(): void;
    setEngineHealth(health: number): void;
    setDisablePetrolTankFires(toggle: boolean): void;
    isBumberBrokenOff(front: boolean): boolean;
    isWindowIntact(windowIndex: number): boolean;
    setWheelType(wheelType: number): void;
    getModColor2TextLabel(): string;
    setOnGroundProperly(): boolean;
    isStolen(): boolean;
    isDriveable(p0: boolean): boolean;
    setCanBeVisiblyDamaged(state: boolean): void;
    isSirenOn(): boolean;
    getDeformationAtPos(offsetX: number, offsetY: number, offsetZ: number): MpVector3;
    setColours(colorPrimary: number, colorSecondary: number): void;
    setDoorsLockedForPlayer(player: MpPlayer, toggle: boolean): void;
    getModSlotName(modType: number): string;
    setCanRespray(state: boolean): void;
    isAConvertible(p0: boolean): boolean;
    getSuspensionHeight(): number;
    clearCustomPrimaryColour(): void;
    isStopped(): boolean;
    setPedEnabledBikeRingtone(p0: object): boolean;
    setWindowTint(tint: number): void;
    doesHaveStuckVehicleCheck(): boolean;
    setMissionTrainCoords(x: number, y: number, z: number): void;
    setTaxiLight(state: boolean): void;
    setCanBreak(toggle: boolean): void;
    setProvidesCover(toggle: boolean): void;
    setAllowNoPassengersLockon(toggle: boolean): void;
    getAcceleration(): number;
    getIsLeftHeadlightDamaged(): boolean;
    clearCustomSecondaryColour(): void;
    rollUpWindow(windowIndex: number): void;
    setLivery(livery: number): void;
    getModKit(): number;
    trackVisibility(): void;
    getTyresCanBurst(): boolean;
    isStuckTimerUp(p0: number, p1: number): boolean;
    setIsStolen(isStolen: boolean): void;
    setHandbrake(toggle: boolean): void;
    getColourCombination(): number;
    setMod(modType: number, modIndex: number, customTires: boolean): void;
    detachWindscreen(): void;
    setHelicopterRollPitchYawMult(multiplier: number): void;
    isCargobobMagnetActive(): boolean;
    setTyreFixed(tyreIndex: number): void;
    setPetrolTankHealth(fix: number): void;
    setCustomPrimaryColour(r: number, g: number, b: number): void;
    setExplodesOnHighExplosionDamage(toggle: boolean): void;
    isTaxiLightOn(): boolean;
    setBoatAnchor(toggle: boolean): void;
    getNeonLightsColour(r: number, g: number, b: number): {
        readonly r: number;
        readonly g: number;
        readonly b: number;
    };
    fixWindow(index: number): void;
    getMod(modType: number): number;
    setDoorsShut(closeInstantly: boolean): void;
    explodeInCutscene(p0: boolean): void;
    setDirtLevel(dirtLevel: number): void;
    rollDownWindow(windowIndex: number): void;
    enableCargobobHook(state: number): void;
    setDoorOpen(doorIndex: number, loose: boolean, openInstantly: boolean): void;
    getNumberPlateText(): string;
    getPetrolTankHealth(): number;
    setExtra(extraId: number, toggle: boolean): void;
    getModColor2(paintType: number, color: number): {
        readonly paintType: number;
        readonly color: number;
        readonly p2: number;
    };
    setModColor2(paintType: number, color: number): void;
    getCustomSecondaryColour(r: number, g: number, b: number): {
        readonly r: number;
        readonly g: number;
        readonly b: number;
    };
    getLastPedInSeat(seatIndex: number): MpPed | object;
    isToggleModOn(modType: number): boolean;
    rollDownWindows(): void;
    getAttachedToCargobob(): MpVehicle | object;
    getLiveryCount(): number;
    openBombBayDoors(): void;
    getModTextLabel(modType: number, modValue: number): string;
    setGravity(toggle: boolean): void;
    setUndriveable(toggle: boolean): void;
    doesHaveRoof(): boolean;
    setFullbeam(toggle: boolean): void;
    setAutomaticallyAttaches(p0: object, p1: object): void;
    isNeaonLightEnabled(index: number): boolean;
    setNeonLightsColour(r: number, g: number, b: number): void;
    getDirtLevel(): number;
    getOwner(entity: MpEntity | object): boolean;
    raiseConvertibleRoof(instantlyRaise: boolean): void;
    detachFromTrailer(): void;
    setNumberPlateTextIndex(plateIndex: number): void;
    getModModifierValue(modType: number, modIndex: number): void;
    getIsSecondaryColourCustom(): boolean;
    setBreakLights(toggle: boolean): void;
    removeMod(modType: number): void;
    setHasStrongAxles(toggle: boolean): void;
    setEnginePowerMultiplier(value: number): void;
    setLodMultiplier(multiplier: number): void;
    setDoorShut(doorIndex: number, closeInstantly: boolean): void;
    setDeformationFixed(): void;
    setNumberPlateText(plateText: string): void;
    retractCargobobHook(): void;
    setEngineCanDegrade(toggle: boolean): void;
    cargobobMagnetGrab(toggle: boolean): void;
    getLandingGearState(): number;
    startHorn(duration: number, model: string | number, forever: boolean): void;
    getPlateType(): number;
    setBikeLeanAngle(x: number, y: number): void;
    setSilent(toggle: boolean): void;
    smashWindow(index: number): void;
    isBig(): boolean;
    getMaxTraction(): number;
    setHeliBladesFullSpeed(): void;
    getColours(colorPrimary: number, colorSecondary: number): {
        readonly colorPrimary: number;
        readonly colorSecondary: number;
    };
    setDamage(xOffset: number, yOffset: number, zOffset: number, damage: number, radius: number, p5: boolean): void;
    setDoorsLockedForAllPlayers(toggle: boolean): void;
    setWheelsCanBreakOffWhenBlowUp(toggle: boolean): void;
    setCeilingHeight(p0: number): void;
    setPlaybackToUseAi(flag: number): void;
    setDoorLatched(doorIndex: number, p1: boolean, p2: boolean, p3: boolean): void;
    requestHighDetailModel(): void;
    removeWindow(windowIndex: number): void;
    getMaxNumberOfPassengers(): number;
    getIsRightHeadlightDamaged(): boolean;
    getPaintFade(): number;
    isVisible(): boolean;
    setTrainSpeed(speed: number): void;
    setForwardSpeed(speed: number): void;
    getHeliEngineHealth(): number;
    getMaxBreaking(): number;
    detachFromAnyCargobob(): boolean;
    getIsEngineRunning(): boolean;
    getHeliTailRotorHealth(): number;
    isOnAllWheels(): boolean;
    setLightMultiplier(multiplier: number): void;
    getModVariation(modType: number): boolean;
    getWheelType(): number;
    getModColor1TextLabel(p0: boolean): string;
    isStuckOnRoof(): boolean;
    getLiveryName(liveryIndex: number): string;
    setEngineTorqueMultiplier(value: number): void;
    setTyreSmokeColor(r: number, g: number, b: number): void;
    setExclusiveDriver(ped: MpPed | object, p1: number): void;
    isSirenSoundOn(): boolean;
    setIndicatorLights(turnSignal: number, toggle: boolean): void;
    getTyreSmokeColor(r: number, g: number, b: number): {
        readonly r: number;
        readonly g: number;
        readonly b: number;
    };
    getCustomPrimaryColour(r: number, g: number, b: number): {
        readonly r: number;
        readonly g: number;
        readonly b: number;
    };
    setDoorsLocked(doorLockStatus: number): void;
    addUpsidedownCheck(): void;
    setBodyHealth(value: number): void;
    setDoorsLockedForTeam(team: number, toggle: boolean): void;
    setPlaneMinHeightAboveGround(height: number): void;
    isDoorDamaged(doorId: number | number): boolean;
    getBodyHealth2(): number;
    setJetEngineOn(toggle: boolean): void;
    startAlarm(): void;
    getLightsState(lightsOn: boolean, highbeamsOn: boolean): {
        readonly lightsOn: boolean;
        readonly highbeamsOn: boolean;
    };
    isTyreBurst(wheelId: number, completely: boolean): boolean;
    explode(isAudible: boolean, isInvisble: boolean): void;
    getPedInSeat(index: number): MpPed | object;
    setInteriorLight(toggle: boolean): void;
    isHeliPartBroken(p0: boolean, p1: boolean, p2: boolean): boolean;
    isDamaged(): boolean;
    setPlayersLast(): void;
    setPedTargettableDestory(vehicleComponent: number, destroyType: number): void;
    setNameDebug(name: string): void;
    isSearchlightOn(): boolean;
    detachFromTowTruck(vehicle: MpVehicle | object): void;
    getEngineHealth(): number;
    removeUpsidedownCheck(): void;
    jitter(p0: boolean, yaw: number, pitch: number, roll: number): void;
    getCargobobHookPosition(): MpVector3;
    setAlarm(state: boolean): void;
    setLandingGear(state: number): void;
    detachFromAnyTowTruck(): boolean;
    isExtraTurnedOn(extraId: number): boolean;
    isAttachedToCargobob(vehicleAttached: MpVehicle | object): boolean;
    setDoorBroken(doorIndex: number, createDoorObject: boolean): void;
    resetStuckTimer(reset: boolean): void;
    disableImpactExplosionActivation(toggle: boolean): void;
    lowerConvertibleRoof(instantlyLower: boolean): void;
    setAllsSpawns(p0: boolean, p1: boolean, p2: boolean): void;
    ejectJb700Roof(x: number, y: number, z: number): void;
    getNumMods(modType: number): number;
    getCauseOfDestruction(): string | number;
    getHeliMainRotorHealth(): number;
    isAttachedToTrailer(): boolean;
    getModColor1(paintType: number | number, color: number, p2: number): {
        readonly paintType: number | number;
        readonly color: number;
        readonly p2: number;
    };
    setTyresCanBurst(toggle: boolean): void;
    setTyreBurst(tyreIndex: number, onRim: boolean, p2: number): void;
    getAttachedToTowTruck(): MpEntity | object;
    getIsPrimaryColourCustom(): boolean;
    getNumberPlateTextIndex(): number;
    setOutOfControl(killDriver: boolean, explodeOnImpact: boolean): void;
    getBodyHealth(): number;
    setDoorControl(doorIndex: number, speed: number, angle: number): void;
    setConvertibleRoof(p0: boolean): void;
    getColor(r: number, g: number, b: number): {
        readonly r: number;
        readonly g: number;
        readonly b: number;
    };
    setSiren(toggle: boolean): void;
    getDoorsLockedForPlayer(player: MpPlayer): boolean;
    setIsWanted(state: boolean): void;
    getConvertibleRoofState(): number;
    setBurnout(toggle: boolean): void;
    setNeedsToBeHotwired(toggle: boolean): void;
    getModKitType(): number;
    setHeliBladeSpeed(speed: number): void;
    getDoorAngleRatio(door: number): number;
    setTowTruckCraneHeight(height: number): void;
}

declare interface MpVehiclePool extends MpPool<MpVehicle> {

}

declare const mp: ScriptContext;